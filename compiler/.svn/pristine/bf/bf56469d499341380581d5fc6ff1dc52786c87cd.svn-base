// Generated from CTX.g4 by ANTLR 4.0

package bigproject.syntactic;
import bigproject.ast.*;
import bigproject.symbol.*;
import static bigproject.symbol.Symbol.symbol;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CTXParser extends Parser {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__57=1, T__56=2, T__55=3, T__54=4, T__53=5, T__52=6, T__51=7, T__50=8, 
		T__49=9, T__48=10, T__47=11, T__46=12, T__45=13, T__44=14, T__43=15, T__42=16, 
		T__41=17, T__40=18, T__39=19, T__38=20, T__37=21, T__36=22, T__35=23, 
		T__34=24, T__33=25, T__32=26, T__31=27, T__30=28, T__29=29, T__28=30, 
		T__27=31, T__26=32, T__25=33, T__24=34, T__23=35, T__22=36, T__21=37, 
		T__20=38, T__19=39, T__18=40, T__17=41, T__16=42, T__15=43, T__14=44, 
		T__13=45, T__12=46, T__11=47, T__10=48, T__9=49, T__8=50, T__7=51, T__6=52, 
		T__5=53, T__4=54, T__3=55, T__2=56, T__1=57, T__0=58, INTEGER=59, CHAR=60, 
		DECINTEGER=61, HEXINTEGER=62, OCTINTEGER=63, STRING=64, IDENTIFIER=65, 
		WS=66, COMMENTS=67, LINE_COMMENT=68, INCLUDE_COMMENT=69;
	public static final String[] tokenNames = {
		"<INVALID>", "'&'", "'['", "'*'", "'<'", "'--'", "'continue'", "'!='", 
		"'<='", "'<<'", "'}'", "'char'", "'%'", "'->'", "'*='", "'union'", "')'", 
		"'='", "'|='", "'|'", "'!'", "'sizeof'", "'<<='", "']'", "'-='", "','", 
		"'while'", "'-'", "'('", "'&='", "'if'", "'int'", "'void'", "'>>='", "'{'", 
		"'...'", "'break'", "'+='", "'^='", "'else'", "'struct'", "'++'", "'>>'", 
		"'^'", "'.'", "'+'", "'for'", "'typedef'", "'return'", "';'", "'&&'", 
		"'||'", "'>'", "'%='", "'/='", "'=='", "'/'", "'~'", "'>='", "INTEGER", 
		"CHAR", "DECINTEGER", "HEXINTEGER", "OCTINTEGER", "STRING", "IDENTIFIER", 
		"WS", "COMMENTS", "LINE_COMMENT", "INCLUDE_COMMENT"
	};
	public static final int
		RULE_program = 0, RULE_declaration = 1, RULE_function_definition = 2, 
		RULE_parameters = 3, RULE_declarators = 4, RULE_init_declarators = 5, 
		RULE_init_declarator = 6, RULE_initializer = 7, RULE_initializers = 8, 
		RULE_type_specifier = 9, RULE_struct_or_union = 10, RULE_plain_declaration = 11, 
		RULE_declarator = 12, RULE_plain_declarator = 13, RULE_statement = 14, 
		RULE_expression_statement = 15, RULE_compound_statement = 16, RULE_selection_statement = 17, 
		RULE_while_statement = 18, RULE_for_statement = 19, RULE_jump_statement = 20, 
		RULE_expression = 21, RULE_assignment_expression = 22, RULE_assignment_operator = 23, 
		RULE_logical_or_expression = 24, RULE_logical_and_expression = 25, RULE_inclusive_or_expression = 26, 
		RULE_exclusive_or_expression = 27, RULE_and_expression = 28, RULE_equality_expression = 29, 
		RULE_equality_operator = 30, RULE_relational_expression = 31, RULE_relational_operator = 32, 
		RULE_shift_expression = 33, RULE_shift_operator = 34, RULE_additive_expression = 35, 
		RULE_additive_operator = 36, RULE_multiplicative_expression = 37, RULE_multiplicative_operator = 38, 
		RULE_cast_expression = 39, RULE_type_name = 40, RULE_unary_expression = 41, 
		RULE_unary_operator = 42, RULE_postfix_expression = 43, RULE_postfix = 44, 
		RULE_arguments = 45, RULE_primary_expression = 46, RULE_constant = 47, 
		RULE_typedef_name = 48, RULE_identifier = 49, RULE_string = 50, RULE_integer_constant = 51, 
		RULE_character_constant = 52;
	public static final String[] ruleNames = {
		"program", "declaration", "function_definition", "parameters", "declarators", 
		"init_declarators", "init_declarator", "initializer", "initializers", 
		"type_specifier", "struct_or_union", "plain_declaration", "declarator", 
		"plain_declarator", "statement", "expression_statement", "compound_statement", 
		"selection_statement", "while_statement", "for_statement", "jump_statement", 
		"expression", "assignment_expression", "assignment_operator", "logical_or_expression", 
		"logical_and_expression", "inclusive_or_expression", "exclusive_or_expression", 
		"and_expression", "equality_expression", "equality_operator", "relational_expression", 
		"relational_operator", "shift_expression", "shift_operator", "additive_expression", 
		"additive_operator", "multiplicative_expression", "multiplicative_operator", 
		"cast_expression", "type_name", "unary_expression", "unary_operator", 
		"postfix_expression", "postfix", "arguments", "primary_expression", "constant", 
		"typedef_name", "identifier", "string", "integer_constant", "character_constant"
	};

	@Override
	public String getGrammarFileName() { return "CTX.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public CTXParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ProgramContext extends ParserRuleContext {
		public Program v;
		public DeclarationContext a;
		public Function_definitionContext b;
		public List<DeclarationContext> declaration() {
			return getRuleContexts(DeclarationContext.class);
		}
		public Function_definitionContext function_definition(int i) {
			return getRuleContext(Function_definitionContext.class,i);
		}
		public DeclarationContext declaration(int i) {
			return getRuleContext(DeclarationContext.class,i);
		}
		public List<Function_definitionContext> function_definition() {
			return getRuleContexts(Function_definitionContext.class);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterProgram(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitProgram(this);
		}
	}

	public final ProgramContext program() throws RecognitionException {
		ProgramContext _localctx = new ProgramContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<DeclStat> list = new ArrayList<DeclStat>();
			setState(113); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(113);
				switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					setState(107); ((ProgramContext)_localctx).a = declaration();
					list.add(((ProgramContext)_localctx).a.v);
					}
					break;

				case 2:
					{
					setState(110); ((ProgramContext)_localctx).b = function_definition();
					list.add(((ProgramContext)_localctx).b.v);
					}
					break;
				}
				}
				setState(115); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & ((1L << (11 - 11)) | (1L << (15 - 11)) | (1L << (31 - 11)) | (1L << (32 - 11)) | (1L << (40 - 11)) | (1L << (47 - 11)) | (1L << (IDENTIFIER - 11)))) != 0) );
			((ProgramContext)_localctx).v =  new Program(list);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclarationContext extends ParserRuleContext {
		public DeclStat v;
		public Type_specifierContext a;
		public DeclaratorsContext b;
		public Init_declaratorsContext c;
		public Init_declaratorsContext init_declarators() {
			return getRuleContext(Init_declaratorsContext.class,0);
		}
		public DeclaratorsContext declarators() {
			return getRuleContext(DeclaratorsContext.class,0);
		}
		public Type_specifierContext type_specifier() {
			return getRuleContext(Type_specifierContext.class,0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitDeclaration(this);
		}
	}

	public final DeclarationContext declaration() throws RecognitionException {
		DeclarationContext _localctx = new DeclarationContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_declaration);
		int _la;
		try {
			setState(135);
			switch (_input.LA(1)) {
			case 47:
				enterOuterAlt(_localctx, 1);
				{
				setState(119); match(47);
				setState(120); ((DeclarationContext)_localctx).a = type_specifier();
				setState(121); ((DeclarationContext)_localctx).b = declarators();
				setState(122); match(49);
				((DeclarationContext)_localctx).v =  new TypeDecl(((DeclarationContext)_localctx).a.v, ((DeclarationContext)_localctx).b.v);
				}
				break;
			case 11:
			case 15:
			case 31:
			case 32:
			case 40:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				InitDeclors init = null;
				setState(126); ((DeclarationContext)_localctx).a = type_specifier();
				setState(130);
				_la = _input.LA(1);
				if (_la==3 || _la==IDENTIFIER) {
					{
					setState(127); ((DeclarationContext)_localctx).c = init_declarators();
					init = ((DeclarationContext)_localctx).c.v;
					}
				}

				setState(132); match(49);
				((DeclarationContext)_localctx).v =  new VarDecl(((DeclarationContext)_localctx).a.v, init);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_definitionContext extends ParserRuleContext {
		public FunDecl v;
		public Type_specifierContext a;
		public Plain_declaratorContext b;
		public ParametersContext d;
		public Compound_statementContext c;
		public Plain_declaratorContext plain_declarator() {
			return getRuleContext(Plain_declaratorContext.class,0);
		}
		public Type_specifierContext type_specifier() {
			return getRuleContext(Type_specifierContext.class,0);
		}
		public ParametersContext parameters() {
			return getRuleContext(ParametersContext.class,0);
		}
		public Compound_statementContext compound_statement() {
			return getRuleContext(Compound_statementContext.class,0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterFunction_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitFunction_definition(this);
		}
	}

	public final Function_definitionContext function_definition() throws RecognitionException {
		Function_definitionContext _localctx = new Function_definitionContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_function_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			Params para = null;
			setState(138); ((Function_definitionContext)_localctx).a = type_specifier();
			setState(139); ((Function_definitionContext)_localctx).b = plain_declarator();
			setState(140); match(28);
			setState(144);
			_la = _input.LA(1);
			if (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & ((1L << (11 - 11)) | (1L << (15 - 11)) | (1L << (31 - 11)) | (1L << (32 - 11)) | (1L << (40 - 11)) | (1L << (IDENTIFIER - 11)))) != 0)) {
				{
				setState(141); ((Function_definitionContext)_localctx).d = parameters();
				para = ((Function_definitionContext)_localctx).d.v;
				}
			}

			setState(146); match(16);
			setState(147); ((Function_definitionContext)_localctx).c = compound_statement();
			((Function_definitionContext)_localctx).v =  new FunDecl(((Function_definitionContext)_localctx).a.v, ((Function_definitionContext)_localctx).b.v, para, ((Function_definitionContext)_localctx).c.v);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParametersContext extends ParserRuleContext {
		public Params v;
		public Plain_declarationContext a;
		public Plain_declarationContext b;
		public Plain_declarationContext plain_declaration(int i) {
			return getRuleContext(Plain_declarationContext.class,i);
		}
		public List<Plain_declarationContext> plain_declaration() {
			return getRuleContexts(Plain_declarationContext.class);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitParameters(this);
		}
	}

	public final ParametersContext parameters() throws RecognitionException {
		ParametersContext _localctx = new ParametersContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_parameters);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			boolean other = false; List<PlanDecl> list = new ArrayList<PlanDecl>();
			setState(151); ((ParametersContext)_localctx).a = plain_declaration();
			list.add(((ParametersContext)_localctx).a.v);
			setState(159);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(153); match(25);
					setState(154); ((ParametersContext)_localctx).b = plain_declaration();
					list.add(((ParametersContext)_localctx).b.v);
					}
					} 
				}
				setState(161);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(165);
			_la = _input.LA(1);
			if (_la==25) {
				{
				setState(162); match(25);
				setState(163); match(35);
				other = true;
				}
			}

			((ParametersContext)_localctx).v =  new Params(list, other);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclaratorsContext extends ParserRuleContext {
		public Declors v;
		public DeclaratorContext a;
		public DeclaratorContext b;
		public List<DeclaratorContext> declarator() {
			return getRuleContexts(DeclaratorContext.class);
		}
		public DeclaratorContext declarator(int i) {
			return getRuleContext(DeclaratorContext.class,i);
		}
		public DeclaratorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declarators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterDeclarators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitDeclarators(this);
		}
	}

	public final DeclaratorsContext declarators() throws RecognitionException {
		DeclaratorsContext _localctx = new DeclaratorsContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_declarators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Declor> list = new ArrayList<Declor>();
			setState(170); ((DeclaratorsContext)_localctx).a = declarator();
			list.add(((DeclaratorsContext)_localctx).a.v);
			setState(178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==25) {
				{
				{
				setState(172); match(25);
				setState(173); ((DeclaratorsContext)_localctx).b = declarator();
				list.add(((DeclaratorsContext)_localctx).b.v);
				}
				}
				setState(180);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((DeclaratorsContext)_localctx).v =  new Declors(list);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Init_declaratorsContext extends ParserRuleContext {
		public InitDeclors v;
		public Init_declaratorContext a;
		public Init_declaratorContext b;
		public List<Init_declaratorContext> init_declarator() {
			return getRuleContexts(Init_declaratorContext.class);
		}
		public Init_declaratorContext init_declarator(int i) {
			return getRuleContext(Init_declaratorContext.class,i);
		}
		public Init_declaratorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_init_declarators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterInit_declarators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitInit_declarators(this);
		}
	}

	public final Init_declaratorsContext init_declarators() throws RecognitionException {
		Init_declaratorsContext _localctx = new Init_declaratorsContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_init_declarators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<InitDeclor> list = new ArrayList<InitDeclor>();
			setState(184); ((Init_declaratorsContext)_localctx).a = init_declarator();
			list.add(((Init_declaratorsContext)_localctx).a.v);
			setState(192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==25) {
				{
				{
				setState(186); match(25);
				setState(187); ((Init_declaratorsContext)_localctx).b = init_declarator();
				list.add(((Init_declaratorsContext)_localctx).b.v);
				}
				}
				setState(194);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((Init_declaratorsContext)_localctx).v =  new InitDeclors(list);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Init_declaratorContext extends ParserRuleContext {
		public InitDeclor v;
		public DeclaratorContext a;
		public InitializerContext b;
		public DeclaratorContext declarator() {
			return getRuleContext(DeclaratorContext.class,0);
		}
		public InitializerContext initializer() {
			return getRuleContext(InitializerContext.class,0);
		}
		public Init_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_init_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterInit_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitInit_declarator(this);
		}
	}

	public final Init_declaratorContext init_declarator() throws RecognitionException {
		Init_declaratorContext _localctx = new Init_declaratorContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_init_declarator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			Initer init = null;
			setState(198); ((Init_declaratorContext)_localctx).a = declarator();
			setState(203);
			_la = _input.LA(1);
			if (_la==17) {
				{
				setState(199); match(17);
				setState(200); ((Init_declaratorContext)_localctx).b = initializer();
				init = ((Init_declaratorContext)_localctx).b.v;
				}
			}

			((Init_declaratorContext)_localctx).v =  new InitDeclor(((Init_declaratorContext)_localctx).a.v, init);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InitializerContext extends ParserRuleContext {
		public Initer v;
		public Assignment_expressionContext a;
		public InitializersContext b;
		public InitializersContext initializers() {
			return getRuleContext(InitializersContext.class,0);
		}
		public Assignment_expressionContext assignment_expression() {
			return getRuleContext(Assignment_expressionContext.class,0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitInitializer(this);
		}
	}

	public final InitializerContext initializer() throws RecognitionException {
		InitializerContext _localctx = new InitializerContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_initializer);
		try {
			setState(215);
			switch (_input.LA(1)) {
			case 1:
			case 3:
			case 5:
			case 20:
			case 21:
			case 27:
			case 28:
			case 41:
			case 45:
			case 57:
			case INTEGER:
			case CHAR:
			case STRING:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(207); ((InitializerContext)_localctx).a = assignment_expression();
				((InitializerContext)_localctx).v =  new Initer(((InitializerContext)_localctx).a.v);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 2);
				{
				setState(210); match(34);
				setState(211); ((InitializerContext)_localctx).b = initializers();
				((InitializerContext)_localctx).v =  new Initer(((InitializerContext)_localctx).b.v);
				setState(213); match(10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InitializersContext extends ParserRuleContext {
		public Initers v;
		public InitializerContext a;
		public InitializerContext b;
		public InitializerContext initializer(int i) {
			return getRuleContext(InitializerContext.class,i);
		}
		public List<InitializerContext> initializer() {
			return getRuleContexts(InitializerContext.class);
		}
		public InitializersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_initializers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterInitializers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitInitializers(this);
		}
	}

	public final InitializersContext initializers() throws RecognitionException {
		InitializersContext _localctx = new InitializersContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_initializers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Initer> list = new ArrayList<Initer>();
			setState(218); ((InitializersContext)_localctx).a = initializer();
			list.add(((InitializersContext)_localctx).a.v);
			setState(226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==25) {
				{
				{
				setState(220); match(25);
				setState(221); ((InitializersContext)_localctx).b = initializer();
				list.add(((InitializersContext)_localctx).b.v);
				}
				}
				setState(228);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((InitializersContext)_localctx).v =  new Initers(list);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specifierContext extends ParserRuleContext {
		public Ty v;
		public Typedef_nameContext a;
		public Struct_or_unionContext b;
		public IdentifierContext e;
		public Type_specifierContext c;
		public DeclaratorsContext d;
		public DeclaratorsContext declarators(int i) {
			return getRuleContext(DeclaratorsContext.class,i);
		}
		public Typedef_nameContext typedef_name() {
			return getRuleContext(Typedef_nameContext.class,0);
		}
		public List<DeclaratorsContext> declarators() {
			return getRuleContexts(DeclaratorsContext.class);
		}
		public Type_specifierContext type_specifier(int i) {
			return getRuleContext(Type_specifierContext.class,i);
		}
		public List<Type_specifierContext> type_specifier() {
			return getRuleContexts(Type_specifierContext.class);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Struct_or_unionContext struct_or_union() {
			return getRuleContext(Struct_or_unionContext.class,0);
		}
		public Type_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterType_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitType_specifier(this);
		}
	}

	public final Type_specifierContext type_specifier() throws RecognitionException {
		Type_specifierContext _localctx = new Type_specifierContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_type_specifier);
		int _la;
		try {
			setState(265);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(231); match(32);
				((Type_specifierContext)_localctx).v =  new VoidTy();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(233); match(11);
				((Type_specifierContext)_localctx).v =  new CharTy();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(235); match(31);
				((Type_specifierContext)_localctx).v =  new IntTy();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(237); ((Type_specifierContext)_localctx).a = typedef_name();
				((Type_specifierContext)_localctx).v =  new NameTy(symbol(((Type_specifierContext)_localctx).a.v));
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				Symbol sym = null; List<Ty> list1 = new ArrayList<Ty>(); List<Declors> list2 = new ArrayList<Declors>();
				setState(241); ((Type_specifierContext)_localctx).b = struct_or_union();
				setState(245);
				_la = _input.LA(1);
				if (_la==IDENTIFIER) {
					{
					setState(242); ((Type_specifierContext)_localctx).e = identifier();
					sym = symbol("name "+((Type_specifierContext)_localctx).e.v);
					}
				}

				setState(247); match(34);
				setState(254); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(248); ((Type_specifierContext)_localctx).c = type_specifier();
					list1.add(((Type_specifierContext)_localctx).c.v);
					setState(250); ((Type_specifierContext)_localctx).d = declarators();
					list2.add(((Type_specifierContext)_localctx).d.v);
					setState(252); match(49);
					}
					}
					setState(256); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & ((1L << (11 - 11)) | (1L << (15 - 11)) | (1L << (31 - 11)) | (1L << (32 - 11)) | (1L << (40 - 11)) | (1L << (IDENTIFIER - 11)))) != 0) );
				setState(258); match(10);
				((Type_specifierContext)_localctx).v =  new RecordTy(sym, ((Type_specifierContext)_localctx).b.v, list1, list2);
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(261); ((Type_specifierContext)_localctx).b = struct_or_union();
				setState(262); ((Type_specifierContext)_localctx).e = identifier();
				((Type_specifierContext)_localctx).v =  new RecordTy(symbol("name "+((Type_specifierContext)_localctx).e.v), ((Type_specifierContext)_localctx).b.v);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Struct_or_unionContext extends ParserRuleContext {
		public int v;
		public Struct_or_unionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_or_union; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterStruct_or_union(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitStruct_or_union(this);
		}
	}

	public final Struct_or_unionContext struct_or_union() throws RecognitionException {
		Struct_or_unionContext _localctx = new Struct_or_unionContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_struct_or_union);
		try {
			setState(271);
			switch (_input.LA(1)) {
			case 40:
				enterOuterAlt(_localctx, 1);
				{
				setState(267); match(40);
				((Struct_or_unionContext)_localctx).v =  0;
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 2);
				{
				setState(269); match(15);
				((Struct_or_unionContext)_localctx).v =  1;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plain_declarationContext extends ParserRuleContext {
		public PlanDecl v;
		public Type_specifierContext a;
		public DeclaratorContext b;
		public DeclaratorContext declarator() {
			return getRuleContext(DeclaratorContext.class,0);
		}
		public Type_specifierContext type_specifier() {
			return getRuleContext(Type_specifierContext.class,0);
		}
		public Plain_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plain_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterPlain_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitPlain_declaration(this);
		}
	}

	public final Plain_declarationContext plain_declaration() throws RecognitionException {
		Plain_declarationContext _localctx = new Plain_declarationContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_plain_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(273); ((Plain_declarationContext)_localctx).a = type_specifier();
			setState(274); ((Plain_declarationContext)_localctx).b = declarator();
			((Plain_declarationContext)_localctx).v =  new PlanDecl(((Plain_declarationContext)_localctx).a.v, ((Plain_declarationContext)_localctx).b.v);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclaratorContext extends ParserRuleContext {
		public Declor v;
		public Plain_declaratorContext a;
		public ParametersContext b;
		public Logical_or_expressionContext c;
		public Plain_declaratorContext plain_declarator() {
			return getRuleContext(Plain_declaratorContext.class,0);
		}
		public List<Logical_or_expressionContext> logical_or_expression() {
			return getRuleContexts(Logical_or_expressionContext.class);
		}
		public ParametersContext parameters() {
			return getRuleContext(ParametersContext.class,0);
		}
		public Logical_or_expressionContext logical_or_expression(int i) {
			return getRuleContext(Logical_or_expressionContext.class,i);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterDeclarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitDeclarator(this);
		}
	}

	public final DeclaratorContext declarator() throws RecognitionException {
		DeclaratorContext _localctx = new DeclaratorContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_declarator);
		int _la;
		try {
			setState(302);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				Params para = null;
				setState(278); ((DeclaratorContext)_localctx).a = plain_declarator();
				setState(279); match(28);
				setState(283);
				_la = _input.LA(1);
				if (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & ((1L << (11 - 11)) | (1L << (15 - 11)) | (1L << (31 - 11)) | (1L << (32 - 11)) | (1L << (40 - 11)) | (1L << (IDENTIFIER - 11)))) != 0)) {
					{
					setState(280); ((DeclaratorContext)_localctx).b = parameters();
					para = ((DeclaratorContext)_localctx).b.v;
					}
				}

				setState(285); match(16);
				((DeclaratorContext)_localctx).v =  new FunDeclor(((DeclaratorContext)_localctx).a.v, para);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				List<Exp> list = new ArrayList<Exp>();
				setState(289); ((DeclaratorContext)_localctx).a = plain_declarator();
				setState(297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==2) {
					{
					{
					setState(290); match(2);
					setState(291); ((DeclaratorContext)_localctx).c = logical_or_expression();
					setState(292); match(23);
					list.add(((DeclaratorContext)_localctx).c.v);
					}
					}
					setState(299);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				((DeclaratorContext)_localctx).v =  new ArrayDeclor(((DeclaratorContext)_localctx).a.v, list);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plain_declaratorContext extends ParserRuleContext {
		public PlanDeclor v;
		public IdentifierContext a;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Plain_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plain_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterPlain_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitPlain_declarator(this);
		}
	}

	public final Plain_declaratorContext plain_declarator() throws RecognitionException {
		Plain_declaratorContext _localctx = new Plain_declaratorContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_plain_declarator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			int stars = 0;
			setState(309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==3) {
				{
				{
				setState(305); match(3);
				stars = stars + 1;
				}
				}
				setState(311);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(312); ((Plain_declaratorContext)_localctx).a = identifier();
			((Plain_declaratorContext)_localctx).v =  new PlanDeclor(symbol(((Plain_declaratorContext)_localctx).a.v), stars);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Stat v;
		public Expression_statementContext expression_statement;
		public Compound_statementContext compound_statement;
		public Selection_statementContext selection_statement;
		public While_statementContext while_statement;
		public For_statementContext for_statement;
		public Jump_statementContext jump_statement;
		public Selection_statementContext selection_statement() {
			return getRuleContext(Selection_statementContext.class,0);
		}
		public Expression_statementContext expression_statement() {
			return getRuleContext(Expression_statementContext.class,0);
		}
		public While_statementContext while_statement() {
			return getRuleContext(While_statementContext.class,0);
		}
		public For_statementContext for_statement() {
			return getRuleContext(For_statementContext.class,0);
		}
		public Jump_statementContext jump_statement() {
			return getRuleContext(Jump_statementContext.class,0);
		}
		public Compound_statementContext compound_statement() {
			return getRuleContext(Compound_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_statement);
		try {
			setState(333);
			switch (_input.LA(1)) {
			case 1:
			case 3:
			case 5:
			case 20:
			case 21:
			case 27:
			case 28:
			case 41:
			case 45:
			case 49:
			case 57:
			case INTEGER:
			case CHAR:
			case STRING:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(315); ((StatementContext)_localctx).expression_statement = expression_statement();
				((StatementContext)_localctx).v =  ((StatementContext)_localctx).expression_statement.v;
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 2);
				{
				setState(318); ((StatementContext)_localctx).compound_statement = compound_statement();
				((StatementContext)_localctx).v =  ((StatementContext)_localctx).compound_statement.v;
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 3);
				{
				setState(321); ((StatementContext)_localctx).selection_statement = selection_statement();
				((StatementContext)_localctx).v =  ((StatementContext)_localctx).selection_statement.v;
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 4);
				{
				setState(324); ((StatementContext)_localctx).while_statement = while_statement();
				((StatementContext)_localctx).v =  ((StatementContext)_localctx).while_statement.v;
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 5);
				{
				setState(327); ((StatementContext)_localctx).for_statement = for_statement();
				((StatementContext)_localctx).v =  ((StatementContext)_localctx).for_statement.v;
				}
				break;
			case 6:
			case 36:
			case 48:
				enterOuterAlt(_localctx, 6);
				{
				setState(330); ((StatementContext)_localctx).jump_statement = jump_statement();
				((StatementContext)_localctx).v =  ((StatementContext)_localctx).jump_statement.v;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_statementContext extends ParserRuleContext {
		public ExpStat v;
		public ExpressionContext a;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterExpression_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitExpression_statement(this);
		}
	}

	public final Expression_statementContext expression_statement() throws RecognitionException {
		Expression_statementContext _localctx = new Expression_statementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_expression_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			ExpStat exp = null;
			setState(339);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 27) | (1L << 28) | (1L << 41) | (1L << 45) | (1L << 57) | (1L << INTEGER) | (1L << CHAR))) != 0) || _la==STRING || _la==IDENTIFIER) {
				{
				setState(336); ((Expression_statementContext)_localctx).a = expression();
				exp = new ExpStat(((Expression_statementContext)_localctx).a.v);
				}
			}

			setState(341); match(49);
			((Expression_statementContext)_localctx).v =  exp;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_statementContext extends ParserRuleContext {
		public CompStat v;
		public DeclarationContext a;
		public StatementContext b;
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<DeclarationContext> declaration() {
			return getRuleContexts(DeclarationContext.class);
		}
		public DeclarationContext declaration(int i) {
			return getRuleContext(DeclarationContext.class,i);
		}
		public Compound_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterCompound_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitCompound_statement(this);
		}
	}

	public final Compound_statementContext compound_statement() throws RecognitionException {
		Compound_statementContext _localctx = new Compound_statementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_compound_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			List<DeclStat> list1 = new ArrayList<DeclStat>(); List<Stat> list2 = new ArrayList<Stat>();
			setState(345); match(34);
			setState(351);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					setState(346); ((Compound_statementContext)_localctx).a = declaration();
					list1.add(((Compound_statementContext)_localctx).a.v);
					}
					} 
				}
				setState(353);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			}
			setState(359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 6) | (1L << 20) | (1L << 21) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 30) | (1L << 34) | (1L << 36) | (1L << 41) | (1L << 45) | (1L << 46) | (1L << 48) | (1L << 49) | (1L << 57) | (1L << INTEGER) | (1L << CHAR))) != 0) || _la==STRING || _la==IDENTIFIER) {
				{
				{
				setState(354); ((Compound_statementContext)_localctx).b = statement();
				list2.add(((Compound_statementContext)_localctx).b.v);
				}
				}
				setState(361);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(362); match(10);
			((Compound_statementContext)_localctx).v =  new CompStat(list1, list2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selection_statementContext extends ParserRuleContext {
		public SelectStat v;
		public ExpressionContext a;
		public StatementContext b;
		public StatementContext c;
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public Selection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterSelection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitSelection_statement(this);
		}
	}

	public final Selection_statementContext selection_statement() throws RecognitionException {
		Selection_statementContext _localctx = new Selection_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_selection_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			Stat elsestat = null;
			setState(366); match(30);
			setState(367); match(28);
			setState(368); ((Selection_statementContext)_localctx).a = expression();
			setState(369); match(16);
			setState(370); ((Selection_statementContext)_localctx).b = statement();
			setState(375);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(371); match(39);
				setState(372); ((Selection_statementContext)_localctx).c = statement();
				elsestat = ((Selection_statementContext)_localctx).c.v;
				}
				break;
			}
			((Selection_statementContext)_localctx).v =  new SelectStat(((Selection_statementContext)_localctx).a.v, ((Selection_statementContext)_localctx).b.v, elsestat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class While_statementContext extends ParserRuleContext {
		public WhileStat v;
		public ExpressionContext a;
		public StatementContext b;
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_while_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterWhile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitWhile_statement(this);
		}
	}

	public final While_statementContext while_statement() throws RecognitionException {
		While_statementContext _localctx = new While_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_while_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(379); match(26);
			setState(380); match(28);
			setState(381); ((While_statementContext)_localctx).a = expression();
			setState(382); match(16);
			setState(383); ((While_statementContext)_localctx).b = statement();
			((While_statementContext)_localctx).v =  new WhileStat(((While_statementContext)_localctx).a.v, ((While_statementContext)_localctx).b.v);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_statementContext extends ParserRuleContext {
		public ForStat v;
		public ExpressionContext a;
		public ExpressionContext b;
		public ExpressionContext c;
		public StatementContext d;
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterFor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitFor_statement(this);
		}
	}

	public final For_statementContext for_statement() throws RecognitionException {
		For_statementContext _localctx = new For_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			((For_statementContext)_localctx).v =  new ForStat();
			setState(387); match(46);
			setState(388); match(28);
			setState(392);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 27) | (1L << 28) | (1L << 41) | (1L << 45) | (1L << 57) | (1L << INTEGER) | (1L << CHAR))) != 0) || _la==STRING || _la==IDENTIFIER) {
				{
				setState(389); ((For_statementContext)_localctx).a = expression();
				_localctx.v.setFirstCond(((For_statementContext)_localctx).a.v);
				}
			}

			setState(394); match(49);
			setState(398);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 27) | (1L << 28) | (1L << 41) | (1L << 45) | (1L << 57) | (1L << INTEGER) | (1L << CHAR))) != 0) || _la==STRING || _la==IDENTIFIER) {
				{
				setState(395); ((For_statementContext)_localctx).b = expression();
				_localctx.v.setSecondCond(((For_statementContext)_localctx).b.v);
				}
			}

			setState(400); match(49);
			setState(404);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 27) | (1L << 28) | (1L << 41) | (1L << 45) | (1L << 57) | (1L << INTEGER) | (1L << CHAR))) != 0) || _la==STRING || _la==IDENTIFIER) {
				{
				setState(401); ((For_statementContext)_localctx).c = expression();
				_localctx.v.setThirdCond(((For_statementContext)_localctx).c.v);
				}
			}

			setState(406); match(16);
			setState(407); ((For_statementContext)_localctx).d = statement();
			_localctx.v.setBody(((For_statementContext)_localctx).d.v);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Jump_statementContext extends ParserRuleContext {
		public JumpStat v;
		public ExpressionContext a;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Jump_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jump_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterJump_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitJump_statement(this);
		}
	}

	public final Jump_statementContext jump_statement() throws RecognitionException {
		Jump_statementContext _localctx = new Jump_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_jump_statement);
		int _la;
		try {
			setState(425);
			switch (_input.LA(1)) {
			case 6:
				enterOuterAlt(_localctx, 1);
				{
				setState(410); match(6);
				setState(411); match(49);
				((Jump_statementContext)_localctx).v =  new ContinueStat();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 2);
				{
				setState(413); match(36);
				setState(414); match(49);
				((Jump_statementContext)_localctx).v =  new BreakStat();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 3);
				{
				Exp result = null;
				setState(417); match(48);
				setState(421);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 3) | (1L << 5) | (1L << 20) | (1L << 21) | (1L << 27) | (1L << 28) | (1L << 41) | (1L << 45) | (1L << 57) | (1L << INTEGER) | (1L << CHAR))) != 0) || _la==STRING || _la==IDENTIFIER) {
					{
					setState(418); ((Jump_statementContext)_localctx).a = expression();
					result = ((Jump_statementContext)_localctx).a.v;
					}
				}

				setState(423); match(49);
				((Jump_statementContext)_localctx).v =  new ReturnStat(result);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Exp v;
		public Assignment_expressionContext a;
		public Assignment_expressionContext b;
		public List<Assignment_expressionContext> assignment_expression() {
			return getRuleContexts(Assignment_expressionContext.class);
		}
		public Assignment_expressionContext assignment_expression(int i) {
			return getRuleContext(Assignment_expressionContext.class,i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list = new ArrayList<Exp>();
			setState(428); ((ExpressionContext)_localctx).a = assignment_expression();
			list.add(((ExpressionContext)_localctx).a.v);
			setState(436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==25) {
				{
				{
				setState(430); match(25);
				setState(431); ((ExpressionContext)_localctx).b = assignment_expression();
				list.add(((ExpressionContext)_localctx).b.v);
				}
				}
				setState(438);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((ExpressionContext)_localctx).v =  new CommaExp(list);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_expressionContext extends ParserRuleContext {
		public Exp v;
		public Logical_or_expressionContext a;
		public Unary_expressionContext b;
		public Assignment_operatorContext c;
		public Assignment_expressionContext d;
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Assignment_expressionContext assignment_expression() {
			return getRuleContext(Assignment_expressionContext.class,0);
		}
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Logical_or_expressionContext logical_or_expression() {
			return getRuleContext(Logical_or_expressionContext.class,0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterAssignment_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitAssignment_expression(this);
		}
	}

	public final Assignment_expressionContext assignment_expression() throws RecognitionException {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_assignment_expression);
		try {
			setState(449);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(441); ((Assignment_expressionContext)_localctx).a = logical_or_expression();
				((Assignment_expressionContext)_localctx).v =  ((Assignment_expressionContext)_localctx).a.v;
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(444); ((Assignment_expressionContext)_localctx).b = unary_expression();
				setState(445); ((Assignment_expressionContext)_localctx).c = assignment_operator();
				setState(446); ((Assignment_expressionContext)_localctx).d = assignment_expression();
				((Assignment_expressionContext)_localctx).v =  new AssignExp(((Assignment_expressionContext)_localctx).b.v, ((Assignment_expressionContext)_localctx).c.v, ((Assignment_expressionContext)_localctx).d.v);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_operatorContext extends ParserRuleContext {
		public int v;
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterAssignment_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitAssignment_operator(this);
		}
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_assignment_operator);
		try {
			setState(473);
			switch (_input.LA(1)) {
			case 17:
				enterOuterAlt(_localctx, 1);
				{
				setState(451); match(17);
				((Assignment_operatorContext)_localctx).v =  AssignExp.Assign;
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 2);
				{
				setState(453); match(14);
				((Assignment_operatorContext)_localctx).v =  AssignExp.MultAssign;
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 3);
				{
				setState(455); match(54);
				((Assignment_operatorContext)_localctx).v =  AssignExp.DivAssign;
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 4);
				{
				setState(457); match(53);
				((Assignment_operatorContext)_localctx).v =  AssignExp.ModAssign;
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 5);
				{
				setState(459); match(37);
				((Assignment_operatorContext)_localctx).v =  AssignExp.PlusAssign;
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 6);
				{
				setState(461); match(24);
				((Assignment_operatorContext)_localctx).v =  AssignExp.MinusAssign;
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 7);
				{
				setState(463); match(22);
				((Assignment_operatorContext)_localctx).v =  AssignExp.ShlAssign;
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 8);
				{
				setState(465); match(33);
				((Assignment_operatorContext)_localctx).v =  AssignExp.ShrAssign;
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 9);
				{
				setState(467); match(29);
				((Assignment_operatorContext)_localctx).v =  AssignExp.AndAssign;
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 10);
				{
				setState(469); match(38);
				((Assignment_operatorContext)_localctx).v =  AssignExp.XorAssign;
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 11);
				{
				setState(471); match(18);
				((Assignment_operatorContext)_localctx).v =  AssignExp.OrAssign;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_or_expressionContext extends ParserRuleContext {
		public Exp v;
		public Logical_and_expressionContext a;
		public Logical_and_expressionContext b;
		public List<Logical_and_expressionContext> logical_and_expression() {
			return getRuleContexts(Logical_and_expressionContext.class);
		}
		public Logical_and_expressionContext logical_and_expression(int i) {
			return getRuleContext(Logical_and_expressionContext.class,i);
		}
		public Logical_or_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_or_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterLogical_or_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitLogical_or_expression(this);
		}
	}

	public final Logical_or_expressionContext logical_or_expression() throws RecognitionException {
		Logical_or_expressionContext _localctx = new Logical_or_expressionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_logical_or_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list = new ArrayList<Exp>();
			setState(476); ((Logical_or_expressionContext)_localctx).a = logical_and_expression();
			list.add(((Logical_or_expressionContext)_localctx).a.v);
			setState(484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==51) {
				{
				{
				setState(478); match(51);
				setState(479); ((Logical_or_expressionContext)_localctx).b = logical_and_expression();
				list.add(((Logical_or_expressionContext)_localctx).b.v);
				}
				}
				setState(486);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((Logical_or_expressionContext)_localctx).v =  new OpExp(list, OpExp.LogicalOr);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_and_expressionContext extends ParserRuleContext {
		public Exp v;
		public Inclusive_or_expressionContext a;
		public Inclusive_or_expressionContext b;
		public List<Inclusive_or_expressionContext> inclusive_or_expression() {
			return getRuleContexts(Inclusive_or_expressionContext.class);
		}
		public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return getRuleContext(Inclusive_or_expressionContext.class,i);
		}
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterLogical_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitLogical_and_expression(this);
		}
	}

	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_logical_and_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list = new ArrayList<Exp>();
			setState(490); ((Logical_and_expressionContext)_localctx).a = inclusive_or_expression();
			list.add(((Logical_and_expressionContext)_localctx).a.v);
			setState(498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==50) {
				{
				{
				setState(492); match(50);
				setState(493); ((Logical_and_expressionContext)_localctx).b = inclusive_or_expression();
				list.add(((Logical_and_expressionContext)_localctx).b.v);
				}
				}
				setState(500);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((Logical_and_expressionContext)_localctx).v =  new OpExp(list, OpExp.LogicalAnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inclusive_or_expressionContext extends ParserRuleContext {
		public Exp v;
		public Exclusive_or_expressionContext a;
		public Exclusive_or_expressionContext b;
		public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return getRuleContext(Exclusive_or_expressionContext.class,i);
		}
		public List<Exclusive_or_expressionContext> exclusive_or_expression() {
			return getRuleContexts(Exclusive_or_expressionContext.class);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inclusive_or_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterInclusive_or_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitInclusive_or_expression(this);
		}
	}

	public final Inclusive_or_expressionContext inclusive_or_expression() throws RecognitionException {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_inclusive_or_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list = new ArrayList<Exp>();
			setState(504); ((Inclusive_or_expressionContext)_localctx).a = exclusive_or_expression();
			list.add(((Inclusive_or_expressionContext)_localctx).a.v);
			setState(512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==19) {
				{
				{
				setState(506); match(19);
				setState(507); ((Inclusive_or_expressionContext)_localctx).b = exclusive_or_expression();
				list.add(((Inclusive_or_expressionContext)_localctx).b.v);
				}
				}
				setState(514);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((Inclusive_or_expressionContext)_localctx).v =  new OpExp(list, OpExp.Or);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exclusive_or_expressionContext extends ParserRuleContext {
		public Exp v;
		public And_expressionContext a;
		public And_expressionContext b;
		public List<And_expressionContext> and_expression() {
			return getRuleContexts(And_expressionContext.class);
		}
		public And_expressionContext and_expression(int i) {
			return getRuleContext(And_expressionContext.class,i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusive_or_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterExclusive_or_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitExclusive_or_expression(this);
		}
	}

	public final Exclusive_or_expressionContext exclusive_or_expression() throws RecognitionException {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_exclusive_or_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list = new ArrayList<Exp>();
			setState(518); ((Exclusive_or_expressionContext)_localctx).a = and_expression();
			list.add(((Exclusive_or_expressionContext)_localctx).a.v);
			setState(526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==43) {
				{
				{
				setState(520); match(43);
				setState(521); ((Exclusive_or_expressionContext)_localctx).b = and_expression();
				list.add(((Exclusive_or_expressionContext)_localctx).b.v);
				}
				}
				setState(528);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((Exclusive_or_expressionContext)_localctx).v =  new OpExp(list, OpExp.Xor);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class And_expressionContext extends ParserRuleContext {
		public Exp v;
		public Equality_expressionContext a;
		public Equality_expressionContext b;
		public Equality_expressionContext equality_expression(int i) {
			return getRuleContext(Equality_expressionContext.class,i);
		}
		public List<Equality_expressionContext> equality_expression() {
			return getRuleContexts(Equality_expressionContext.class);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterAnd_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitAnd_expression(this);
		}
	}

	public final And_expressionContext and_expression() throws RecognitionException {
		And_expressionContext _localctx = new And_expressionContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_and_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list = new ArrayList<Exp>();
			setState(532); ((And_expressionContext)_localctx).a = equality_expression();
			list.add(((And_expressionContext)_localctx).a.v);
			setState(540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==1) {
				{
				{
				setState(534); match(1);
				setState(535); ((And_expressionContext)_localctx).b = equality_expression();
				list.add(((And_expressionContext)_localctx).b.v);
				}
				}
				setState(542);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((And_expressionContext)_localctx).v =  new OpExp(list, OpExp.And);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_expressionContext extends ParserRuleContext {
		public Exp v;
		public Relational_expressionContext a;
		public Equality_operatorContext b;
		public Relational_expressionContext c;
		public Equality_operatorContext equality_operator(int i) {
			return getRuleContext(Equality_operatorContext.class,i);
		}
		public List<Equality_operatorContext> equality_operator() {
			return getRuleContexts(Equality_operatorContext.class);
		}
		public Relational_expressionContext relational_expression(int i) {
			return getRuleContext(Relational_expressionContext.class,i);
		}
		public List<Relational_expressionContext> relational_expression() {
			return getRuleContexts(Relational_expressionContext.class);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitEquality_expression(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_equality_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list1 = new ArrayList<Exp>(); List<Integer> list2 = new ArrayList<Integer>();
			setState(546); ((Equality_expressionContext)_localctx).a = relational_expression();
			list1.add(((Equality_expressionContext)_localctx).a.v);
			setState(555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==7 || _la==55) {
				{
				{
				setState(548); ((Equality_expressionContext)_localctx).b = equality_operator();
				list2.add(new Integer(((Equality_expressionContext)_localctx).b.v));
				setState(550); ((Equality_expressionContext)_localctx).c = relational_expression();
				list1.add(((Equality_expressionContext)_localctx).c.v);
				}
				}
				setState(557);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((Equality_expressionContext)_localctx).v =  new OpExp(list1, list2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_operatorContext extends ParserRuleContext {
		public int v;
		public Equality_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterEquality_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitEquality_operator(this);
		}
	}

	public final Equality_operatorContext equality_operator() throws RecognitionException {
		Equality_operatorContext _localctx = new Equality_operatorContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_equality_operator);
		try {
			setState(564);
			switch (_input.LA(1)) {
			case 55:
				enterOuterAlt(_localctx, 1);
				{
				setState(560); match(55);
				((Equality_operatorContext)_localctx).v =  OpExp.Equal;
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 2);
				{
				setState(562); match(7);
				((Equality_operatorContext)_localctx).v =  OpExp.NotEqual;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public Exp v;
		public Shift_expressionContext a;
		public Relational_operatorContext b;
		public Shift_expressionContext c;
		public Relational_operatorContext relational_operator(int i) {
			return getRuleContext(Relational_operatorContext.class,i);
		}
		public List<Shift_expressionContext> shift_expression() {
			return getRuleContexts(Shift_expressionContext.class);
		}
		public List<Relational_operatorContext> relational_operator() {
			return getRuleContexts(Relational_operatorContext.class);
		}
		public Shift_expressionContext shift_expression(int i) {
			return getRuleContext(Shift_expressionContext.class,i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitRelational_expression(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_relational_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list1 = new ArrayList<Exp>(); List<Integer> list2 = new ArrayList<Integer>();
			setState(567); ((Relational_expressionContext)_localctx).a = shift_expression();
			list1.add(((Relational_expressionContext)_localctx).a.v);
			setState(576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 4) | (1L << 8) | (1L << 52) | (1L << 58))) != 0)) {
				{
				{
				setState(569); ((Relational_expressionContext)_localctx).b = relational_operator();
				list2.add(new Integer(((Relational_expressionContext)_localctx).b.v));
				setState(571); ((Relational_expressionContext)_localctx).c = shift_expression();
				list1.add(((Relational_expressionContext)_localctx).c.v);
				}
				}
				setState(578);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((Relational_expressionContext)_localctx).v =  new OpExp(list1, list2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_operatorContext extends ParserRuleContext {
		public int v;
		public Relational_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterRelational_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitRelational_operator(this);
		}
	}

	public final Relational_operatorContext relational_operator() throws RecognitionException {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_relational_operator);
		try {
			setState(589);
			switch (_input.LA(1)) {
			case 4:
				enterOuterAlt(_localctx, 1);
				{
				setState(581); match(4);
				((Relational_operatorContext)_localctx).v =  OpExp.Less;
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 2);
				{
				setState(583); match(52);
				((Relational_operatorContext)_localctx).v =  OpExp.Greater;
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 3);
				{
				setState(585); match(8);
				((Relational_operatorContext)_localctx).v =  OpExp.LessOrEqual;
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 4);
				{
				setState(587); match(58);
				((Relational_operatorContext)_localctx).v =  OpExp.GreaterOrEqual;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shift_expressionContext extends ParserRuleContext {
		public Exp v;
		public Additive_expressionContext a;
		public Shift_operatorContext b;
		public Additive_expressionContext c;
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Shift_operatorContext shift_operator(int i) {
			return getRuleContext(Shift_operatorContext.class,i);
		}
		public List<Shift_operatorContext> shift_operator() {
			return getRuleContexts(Shift_operatorContext.class);
		}
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shift_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterShift_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitShift_expression(this);
		}
	}

	public final Shift_expressionContext shift_expression() throws RecognitionException {
		Shift_expressionContext _localctx = new Shift_expressionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_shift_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list1 = new ArrayList<Exp>(); List<Integer> list2 = new ArrayList<Integer>();
			setState(592); ((Shift_expressionContext)_localctx).a = additive_expression();
			list1.add(((Shift_expressionContext)_localctx).a.v);
			setState(601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==9 || _la==42) {
				{
				{
				setState(594); ((Shift_expressionContext)_localctx).b = shift_operator();
				list2.add(new Integer(((Shift_expressionContext)_localctx).b.v));
				setState(596); ((Shift_expressionContext)_localctx).c = additive_expression();
				list1.add(((Shift_expressionContext)_localctx).c.v);
				}
				}
				setState(603);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((Shift_expressionContext)_localctx).v =  new OpExp(list1, list2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shift_operatorContext extends ParserRuleContext {
		public int v;
		public Shift_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shift_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterShift_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitShift_operator(this);
		}
	}

	public final Shift_operatorContext shift_operator() throws RecognitionException {
		Shift_operatorContext _localctx = new Shift_operatorContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_shift_operator);
		try {
			setState(610);
			switch (_input.LA(1)) {
			case 9:
				enterOuterAlt(_localctx, 1);
				{
				setState(606); match(9);
				((Shift_operatorContext)_localctx).v =  OpExp.Shl;
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 2);
				{
				setState(608); match(42);
				((Shift_operatorContext)_localctx).v =  OpExp.Shr;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_expressionContext extends ParserRuleContext {
		public Exp v;
		public Multiplicative_expressionContext a;
		public Additive_operatorContext b;
		public Multiplicative_expressionContext c;
		public Additive_operatorContext additive_operator(int i) {
			return getRuleContext(Additive_operatorContext.class,i);
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return getRuleContext(Multiplicative_expressionContext.class,i);
		}
		public List<Additive_operatorContext> additive_operator() {
			return getRuleContexts(Additive_operatorContext.class);
		}
		public List<Multiplicative_expressionContext> multiplicative_expression() {
			return getRuleContexts(Multiplicative_expressionContext.class);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitAdditive_expression(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_additive_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list1 = new ArrayList<Exp>(); List<Integer> list2 = new ArrayList<Integer>();
			setState(613); ((Additive_expressionContext)_localctx).a = multiplicative_expression();
			list1.add(((Additive_expressionContext)_localctx).a.v);
			setState(622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==27 || _la==45) {
				{
				{
				setState(615); ((Additive_expressionContext)_localctx).b = additive_operator();
				list2.add(new Integer(((Additive_expressionContext)_localctx).b.v));
				setState(617); ((Additive_expressionContext)_localctx).c = multiplicative_expression();
				list1.add(((Additive_expressionContext)_localctx).c.v);
				}
				}
				setState(624);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((Additive_expressionContext)_localctx).v =  new OpExp(list1, list2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_operatorContext extends ParserRuleContext {
		public int v;
		public Additive_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterAdditive_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitAdditive_operator(this);
		}
	}

	public final Additive_operatorContext additive_operator() throws RecognitionException {
		Additive_operatorContext _localctx = new Additive_operatorContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_additive_operator);
		try {
			setState(631);
			switch (_input.LA(1)) {
			case 45:
				enterOuterAlt(_localctx, 1);
				{
				setState(627); match(45);
				((Additive_operatorContext)_localctx).v =  OpExp.Plus;
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 2);
				{
				setState(629); match(27);
				((Additive_operatorContext)_localctx).v =  OpExp.Minus;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiplicative_expressionContext extends ParserRuleContext {
		public Exp v;
		public Cast_expressionContext a;
		public Multiplicative_operatorContext b;
		public Cast_expressionContext c;
		public List<Cast_expressionContext> cast_expression() {
			return getRuleContexts(Cast_expressionContext.class);
		}
		public Cast_expressionContext cast_expression(int i) {
			return getRuleContext(Cast_expressionContext.class,i);
		}
		public List<Multiplicative_operatorContext> multiplicative_operator() {
			return getRuleContexts(Multiplicative_operatorContext.class);
		}
		public Multiplicative_operatorContext multiplicative_operator(int i) {
			return getRuleContext(Multiplicative_operatorContext.class,i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiplicative_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterMultiplicative_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitMultiplicative_expression(this);
		}
	}

	public final Multiplicative_expressionContext multiplicative_expression() throws RecognitionException {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_multiplicative_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list1 = new ArrayList<Exp>(); List<Integer> list2 = new ArrayList<Integer>();
			setState(634); ((Multiplicative_expressionContext)_localctx).a = cast_expression();
			list1.add(((Multiplicative_expressionContext)_localctx).a.v);
			setState(643);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 12) | (1L << 56))) != 0)) {
				{
				{
				setState(636); ((Multiplicative_expressionContext)_localctx).b = multiplicative_operator();
				list2.add(new Integer(((Multiplicative_expressionContext)_localctx).b.v));
				setState(638); ((Multiplicative_expressionContext)_localctx).c = cast_expression();
				list1.add(((Multiplicative_expressionContext)_localctx).c.v);
				}
				}
				setState(645);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((Multiplicative_expressionContext)_localctx).v =  new OpExp(list1, list2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiplicative_operatorContext extends ParserRuleContext {
		public int v;
		public Multiplicative_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiplicative_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterMultiplicative_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitMultiplicative_operator(this);
		}
	}

	public final Multiplicative_operatorContext multiplicative_operator() throws RecognitionException {
		Multiplicative_operatorContext _localctx = new Multiplicative_operatorContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_multiplicative_operator);
		try {
			setState(654);
			switch (_input.LA(1)) {
			case 3:
				enterOuterAlt(_localctx, 1);
				{
				setState(648); match(3);
				((Multiplicative_operatorContext)_localctx).v =  OpExp.Mult;
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 2);
				{
				setState(650); match(56);
				((Multiplicative_operatorContext)_localctx).v =  OpExp.Div;
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 3);
				{
				setState(652); match(12);
				((Multiplicative_operatorContext)_localctx).v =  OpExp.Mod;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_expressionContext extends ParserRuleContext {
		public Exp v;
		public Unary_expressionContext a;
		public Type_nameContext b;
		public Cast_expressionContext c;
		public Cast_expressionContext cast_expression() {
			return getRuleContext(Cast_expressionContext.class,0);
		}
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterCast_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitCast_expression(this);
		}
	}

	public final Cast_expressionContext cast_expression() throws RecognitionException {
		Cast_expressionContext _localctx = new Cast_expressionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_cast_expression);
		try {
			setState(665);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(656); ((Cast_expressionContext)_localctx).a = unary_expression();
				((Cast_expressionContext)_localctx).v =  ((Cast_expressionContext)_localctx).a.v;
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(659); match(28);
				setState(660); ((Cast_expressionContext)_localctx).b = type_name();
				setState(661); match(16);
				setState(662); ((Cast_expressionContext)_localctx).c = cast_expression();
				((Cast_expressionContext)_localctx).v =  new CoerceExp(((Cast_expressionContext)_localctx).b.v, ((Cast_expressionContext)_localctx).b.u, ((Cast_expressionContext)_localctx).c.v);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public Ty v;
		public int u;
		public Type_specifierContext a;
		public Type_specifierContext type_specifier() {
			return getRuleContext(Type_specifierContext.class,0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitType_name(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(667); ((Type_nameContext)_localctx).a = type_specifier();
			((Type_nameContext)_localctx).v =  ((Type_nameContext)_localctx).a.v; ((Type_nameContext)_localctx).u =  0;
			setState(673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==3) {
				{
				{
				setState(669); match(3);
				((Type_nameContext)_localctx).u =  _localctx.u + 1;
				}
				}
				setState(675);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Exp v;
		public Postfix_expressionContext a;
		public Unary_expressionContext b;
		public Unary_operatorContext d;
		public Cast_expressionContext e;
		public Type_nameContext c;
		public Cast_expressionContext cast_expression() {
			return getRuleContext(Cast_expressionContext.class,0);
		}
		public Postfix_expressionContext postfix_expression() {
			return getRuleContext(Postfix_expressionContext.class,0);
		}
		public Unary_operatorContext unary_operator() {
			return getRuleContext(Unary_operatorContext.class,0);
		}
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitUnary_expression(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_unary_expression);
		try {
			setState(701);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(676); ((Unary_expressionContext)_localctx).a = postfix_expression();
				((Unary_expressionContext)_localctx).v =  ((Unary_expressionContext)_localctx).a.v;
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(679); match(41);
				setState(680); ((Unary_expressionContext)_localctx).b = unary_expression();
				((Unary_expressionContext)_localctx).v =  new SingleOpExp(((Unary_expressionContext)_localctx).b.v, SingleOpExp.DuPlus);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(683); match(5);
				setState(684); ((Unary_expressionContext)_localctx).b = unary_expression();
				((Unary_expressionContext)_localctx).v =  new SingleOpExp(((Unary_expressionContext)_localctx).b.v, SingleOpExp.DuMinus);
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(687); ((Unary_expressionContext)_localctx).d = unary_operator();
				setState(688); ((Unary_expressionContext)_localctx).e = cast_expression();
				((Unary_expressionContext)_localctx).v =  new SingleOpExp(((Unary_expressionContext)_localctx).e.v, ((Unary_expressionContext)_localctx).d.v);
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(691); match(21);
				setState(692); ((Unary_expressionContext)_localctx).b = unary_expression();
				((Unary_expressionContext)_localctx).v =  new SizeofExp(((Unary_expressionContext)_localctx).b.v);
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(695); match(21);
				setState(696); match(28);
				setState(697); ((Unary_expressionContext)_localctx).c = type_name();
				setState(698); match(16);
				((Unary_expressionContext)_localctx).v =  new SizeofExp(((Unary_expressionContext)_localctx).c.v, ((Unary_expressionContext)_localctx).c.u);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_operatorContext extends ParserRuleContext {
		public int v;
		public Unary_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterUnary_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitUnary_operator(this);
		}
	}

	public final Unary_operatorContext unary_operator() throws RecognitionException {
		Unary_operatorContext _localctx = new Unary_operatorContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_unary_operator);
		try {
			setState(715);
			switch (_input.LA(1)) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(703); match(1);
				((Unary_operatorContext)_localctx).v =  2;
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 2);
				{
				setState(705); match(3);
				((Unary_operatorContext)_localctx).v =  3;
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 3);
				{
				setState(707); match(45);
				((Unary_operatorContext)_localctx).v =  4;
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 4);
				{
				setState(709); match(27);
				((Unary_operatorContext)_localctx).v =  5;
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 5);
				{
				setState(711); match(57);
				((Unary_operatorContext)_localctx).v =  6;
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 6);
				{
				setState(713); match(20);
				((Unary_operatorContext)_localctx).v =  7;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Postfix_expressionContext extends ParserRuleContext {
		public Exp v;
		public Primary_expressionContext a;
		public PostfixContext b;
		public PostfixContext postfix(int i) {
			return getRuleContext(PostfixContext.class,i);
		}
		public List<PostfixContext> postfix() {
			return getRuleContexts(PostfixContext.class);
		}
		public Primary_expressionContext primary_expression() {
			return getRuleContext(Primary_expressionContext.class,0);
		}
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_postfix_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterPostfix_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitPostfix_expression(this);
		}
	}

	public final Postfix_expressionContext postfix_expression() throws RecognitionException {
		Postfix_expressionContext _localctx = new Postfix_expressionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_postfix_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Postfix> list = new ArrayList<Postfix>();
			setState(718); ((Postfix_expressionContext)_localctx).a = primary_expression();
			setState(724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 5) | (1L << 13) | (1L << 28) | (1L << 41) | (1L << 44))) != 0)) {
				{
				{
				setState(719); ((Postfix_expressionContext)_localctx).b = postfix();
				list.add(((Postfix_expressionContext)_localctx).b.v);
				}
				}
				setState(726);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((Postfix_expressionContext)_localctx).v =  new PostfixExp(((Postfix_expressionContext)_localctx).a.v, list);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PostfixContext extends ParserRuleContext {
		public Postfix v;
		public ExpressionContext a;
		public ArgumentsContext b;
		public IdentifierContext c;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ArgumentsContext arguments() {
			return getRuleContext(ArgumentsContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PostfixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_postfix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterPostfix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitPostfix(this);
		}
	}

	public final PostfixContext postfix() throws RecognitionException {
		PostfixContext _localctx = new PostfixContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_postfix);
		try {
			setState(754);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(729); match(2);
				setState(730); ((PostfixContext)_localctx).a = expression();
				setState(731); match(23);
				((PostfixContext)_localctx).v =  new ArrayFix(((PostfixContext)_localctx).a.v);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(734); match(28);
				setState(735); match(16);
				((PostfixContext)_localctx).v =  new FunFix();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(737); match(28);
				setState(738); ((PostfixContext)_localctx).b = arguments();
				setState(739); match(16);
				((PostfixContext)_localctx).v =  new FunFix(((PostfixContext)_localctx).b.v);
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(742); match(44);
				setState(743); ((PostfixContext)_localctx).c = identifier();
				((PostfixContext)_localctx).v =  new FieldFix(symbol(((PostfixContext)_localctx).c.v));
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(746); match(13);
				setState(747); ((PostfixContext)_localctx).c = identifier();
				((PostfixContext)_localctx).v =  new BelongFix(symbol(((PostfixContext)_localctx).c.v));
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(750); match(41);
				((PostfixContext)_localctx).v =  new DuPlusFix();
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(752); match(5);
				((PostfixContext)_localctx).v =  new DuMinusFix();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentsContext extends ParserRuleContext {
		public Arguments v;
		public Assignment_expressionContext a;
		public Assignment_expressionContext b;
		public List<Assignment_expressionContext> assignment_expression() {
			return getRuleContexts(Assignment_expressionContext.class);
		}
		public Assignment_expressionContext assignment_expression(int i) {
			return getRuleContext(Assignment_expressionContext.class,i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterArguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitArguments(this);
		}
	}

	public final ArgumentsContext arguments() throws RecognitionException {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			List<Exp> list = new ArrayList<Exp>();
			setState(757); ((ArgumentsContext)_localctx).a = assignment_expression();
			list.add(((ArgumentsContext)_localctx).a.v);
			setState(765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==25) {
				{
				{
				setState(759); match(25);
				setState(760); ((ArgumentsContext)_localctx).b = assignment_expression();
				list.add(((ArgumentsContext)_localctx).b.v);
				}
				}
				setState(767);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			((ArgumentsContext)_localctx).v =  new Arguments(list);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_expressionContext extends ParserRuleContext {
		public Exp v;
		public IdentifierContext a;
		public ConstantContext b;
		public StringContext c;
		public ExpressionContext d;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterPrimary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitPrimary_expression(this);
		}
	}

	public final Primary_expressionContext primary_expression() throws RecognitionException {
		Primary_expressionContext _localctx = new Primary_expressionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_primary_expression);
		try {
			setState(784);
			switch (_input.LA(1)) {
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(770); ((Primary_expressionContext)_localctx).a = identifier();
				((Primary_expressionContext)_localctx).v =  new VarExp(symbol(((Primary_expressionContext)_localctx).a.v));
				}
				break;
			case INTEGER:
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(773); ((Primary_expressionContext)_localctx).b = constant();
				((Primary_expressionContext)_localctx).v =  ((Primary_expressionContext)_localctx).b.v;
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(776); ((Primary_expressionContext)_localctx).c = string();
				((Primary_expressionContext)_localctx).v =  new StringExp(((Primary_expressionContext)_localctx).c.v);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 4);
				{
				setState(779); match(28);
				setState(780); ((Primary_expressionContext)_localctx).d = expression();
				setState(781); match(16);
				((Primary_expressionContext)_localctx).v =  ((Primary_expressionContext)_localctx).d.v;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Exp v;
		public Integer_constantContext a;
		public Character_constantContext b;
		public Character_constantContext character_constant() {
			return getRuleContext(Character_constantContext.class,0);
		}
		public Integer_constantContext integer_constant() {
			return getRuleContext(Integer_constantContext.class,0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_constant);
		try {
			setState(792);
			switch (_input.LA(1)) {
			case INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(786); ((ConstantContext)_localctx).a = integer_constant();
				((ConstantContext)_localctx).v =  new IntExp(((ConstantContext)_localctx).a.v);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(789); ((ConstantContext)_localctx).b = character_constant();
				((ConstantContext)_localctx).v =  new CharExp(((ConstantContext)_localctx).b.v);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Typedef_nameContext extends ParserRuleContext {
		public String v;
		public Token a;
		public TerminalNode IDENTIFIER() { return getToken(CTXParser.IDENTIFIER, 0); }
		public Typedef_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedef_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterTypedef_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitTypedef_name(this);
		}
	}

	public final Typedef_nameContext typedef_name() throws RecognitionException {
		Typedef_nameContext _localctx = new Typedef_nameContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_typedef_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(794); ((Typedef_nameContext)_localctx).a = match(IDENTIFIER);
			((Typedef_nameContext)_localctx).v =  (((Typedef_nameContext)_localctx).a!=null?((Typedef_nameContext)_localctx).a.getText():null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public String v;
		public Token a;
		public TerminalNode IDENTIFIER() { return getToken(CTXParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(797); ((IdentifierContext)_localctx).a = match(IDENTIFIER);
			((IdentifierContext)_localctx).v =  (((IdentifierContext)_localctx).a!=null?((IdentifierContext)_localctx).a.getText():null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringContext extends ParserRuleContext {
		public String v;
		public Token a;
		public TerminalNode STRING() { return getToken(CTXParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitString(this);
		}
	}

	public final StringContext string() throws RecognitionException {
		StringContext _localctx = new StringContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(800); ((StringContext)_localctx).a = match(STRING);
			((StringContext)_localctx).v =  (((StringContext)_localctx).a!=null?((StringContext)_localctx).a.getText():null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Integer_constantContext extends ParserRuleContext {
		public int v;
		public Token a;
		public TerminalNode INTEGER() { return getToken(CTXParser.INTEGER, 0); }
		public Integer_constantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integer_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterInteger_constant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitInteger_constant(this);
		}
	}

	public final Integer_constantContext integer_constant() throws RecognitionException {
		Integer_constantContext _localctx = new Integer_constantContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_integer_constant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(803); ((Integer_constantContext)_localctx).a = match(INTEGER);
			((Integer_constantContext)_localctx).v =  (((Integer_constantContext)_localctx).a!=null?Integer.valueOf(((Integer_constantContext)_localctx).a.getText()):0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_constantContext extends ParserRuleContext {
		public String v;
		public Token a;
		public TerminalNode CHAR() { return getToken(CTXParser.CHAR, 0); }
		public Character_constantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).enterCharacter_constant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CTXListener ) ((CTXListener)listener).exitCharacter_constant(this);
		}
	}

	public final Character_constantContext character_constant() throws RecognitionException {
		Character_constantContext _localctx = new Character_constantContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_character_constant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(806); ((Character_constantContext)_localctx).a = match(CHAR);
			((Character_constantContext)_localctx).v =  (((Character_constantContext)_localctx).a!=null?((Character_constantContext)_localctx).a.getText():null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\2\3G\u032c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4"+
		"\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20"+
		"\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27"+
		"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36"+
		"\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4"+
		")\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62"+
		"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\3\2\3\2\3\2\3\2\3\2\3\2\3\2\6"+
		"\2t\n\2\r\2\16\2u\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\5\3\u0085\n\3\3\3\3\3\3\3\5\3\u008a\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5"+
		"\4\u0093\n\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7\5\u00a0\n\5"+
		"\f\5\16\5\u00a3\13\5\3\5\3\5\3\5\5\5\u00a8\n\5\3\5\3\5\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\7\6\u00b3\n\6\f\6\16\6\u00b6\13\6\3\6\3\6\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\7\7\u00c1\n\7\f\7\16\7\u00c4\13\7\3\7\3\7\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\5\b\u00ce\n\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u00da"+
		"\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\7\n\u00e3\n\n\f\n\16\n\u00e6\13\n\3\n"+
		"\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\5\13\u00f8\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\6\13\u0101\n"+
		"\13\r\13\16\13\u0102\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u010c\n\13"+
		"\3\f\3\f\3\f\3\f\5\f\u0112\n\f\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16"+
		"\3\16\5\16\u011e\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16"+
		"\7\16\u012a\n\16\f\16\16\16\u012d\13\16\3\16\3\16\5\16\u0131\n\16\3\17"+
		"\3\17\3\17\7\17\u0136\n\17\f\17\16\17\u0139\13\17\3\17\3\17\3\17\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\5\20\u0150\n\20\3\21\3\21\3\21\3\21\5\21\u0156\n\21\3"+
		"\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\7\22\u0160\n\22\f\22\16\22\u0163"+
		"\13\22\3\22\3\22\3\22\7\22\u0168\n\22\f\22\16\22\u016b\13\22\3\22\3\22"+
		"\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u017a\n\23"+
		"\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25"+
		"\3\25\5\25\u018b\n\25\3\25\3\25\3\25\3\25\5\25\u0191\n\25\3\25\3\25\3"+
		"\25\3\25\5\25\u0197\n\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26"+
		"\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u01a8\n\26\3\26\3\26\5\26\u01ac\n"+
		"\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u01b5\n\27\f\27\16\27\u01b8"+
		"\13\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u01c4\n"+
		"\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3"+
		"\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u01dc\n\31\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\7\32\u01e5\n\32\f\32\16\32\u01e8\13\32\3\32"+
		"\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u01f3\n\33\f\33\16\33\u01f6"+
		"\13\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\7\34\u0201\n\34\f"+
		"\34\16\34\u0204\13\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35"+
		"\u020f\n\35\f\35\16\35\u0212\13\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\7\36\u021d\n\36\f\36\16\36\u0220\13\36\3\36\3\36\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u022c\n\37\f\37\16\37\u022f\13\37"+
		"\3\37\3\37\3 \3 \3 \3 \5 \u0237\n \3!\3!\3!\3!\3!\3!\3!\3!\7!\u0241\n"+
		"!\f!\16!\u0244\13!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0250\n\""+
		"\3#\3#\3#\3#\3#\3#\3#\3#\7#\u025a\n#\f#\16#\u025d\13#\3#\3#\3$\3$\3$\3"+
		"$\5$\u0265\n$\3%\3%\3%\3%\3%\3%\3%\3%\7%\u026f\n%\f%\16%\u0272\13%\3%"+
		"\3%\3&\3&\3&\3&\5&\u027a\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\7\'\u0284"+
		"\n\'\f\'\16\'\u0287\13\'\3\'\3\'\3(\3(\3(\3(\3(\3(\5(\u0291\n(\3)\3)\3"+
		")\3)\3)\3)\3)\3)\3)\5)\u029c\n)\3*\3*\3*\3*\7*\u02a2\n*\f*\16*\u02a5\13"+
		"*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3"+
		"+\3+\3+\5+\u02c0\n+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u02ce\n,\3"+
		"-\3-\3-\3-\3-\7-\u02d5\n-\f-\16-\u02d8\13-\3-\3-\3.\3.\3.\3.\3.\3.\3."+
		"\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u02f5\n.\3/"+
		"\3/\3/\3/\3/\3/\3/\7/\u02fe\n/\f/\16/\u0301\13/\3/\3/\3\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0313\n\60"+
		"\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u031b\n\61\3\62\3\62\3\62\3\63\3\63"+
		"\3\63\3\64\3\64\3\64\3\65\3\65\3\65\3\66\3\66\3\66\3\66\2\67\2\4\6\b\n"+
		"\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\"+
		"^`bdfhj\2\2\u0353\2l\3\2\2\2\4\u0089\3\2\2\2\6\u008b\3\2\2\2\b\u0098\3"+
		"\2\2\2\n\u00ab\3\2\2\2\f\u00b9\3\2\2\2\16\u00c7\3\2\2\2\20\u00d9\3\2\2"+
		"\2\22\u00db\3\2\2\2\24\u010b\3\2\2\2\26\u0111\3\2\2\2\30\u0113\3\2\2\2"+
		"\32\u0130\3\2\2\2\34\u0132\3\2\2\2\36\u014f\3\2\2\2 \u0151\3\2\2\2\"\u015a"+
		"\3\2\2\2$\u016f\3\2\2\2&\u017d\3\2\2\2(\u0184\3\2\2\2*\u01ab\3\2\2\2,"+
		"\u01ad\3\2\2\2.\u01c3\3\2\2\2\60\u01db\3\2\2\2\62\u01dd\3\2\2\2\64\u01eb"+
		"\3\2\2\2\66\u01f9\3\2\2\28\u0207\3\2\2\2:\u0215\3\2\2\2<\u0223\3\2\2\2"+
		">\u0236\3\2\2\2@\u0238\3\2\2\2B\u024f\3\2\2\2D\u0251\3\2\2\2F\u0264\3"+
		"\2\2\2H\u0266\3\2\2\2J\u0279\3\2\2\2L\u027b\3\2\2\2N\u0290\3\2\2\2P\u029b"+
		"\3\2\2\2R\u029d\3\2\2\2T\u02bf\3\2\2\2V\u02cd\3\2\2\2X\u02cf\3\2\2\2Z"+
		"\u02f4\3\2\2\2\\\u02f6\3\2\2\2^\u0312\3\2\2\2`\u031a\3\2\2\2b\u031c\3"+
		"\2\2\2d\u031f\3\2\2\2f\u0322\3\2\2\2h\u0325\3\2\2\2j\u0328\3\2\2\2ls\b"+
		"\2\1\2mn\5\4\3\2no\b\2\1\2ot\3\2\2\2pq\5\6\4\2qr\b\2\1\2rt\3\2\2\2sm\3"+
		"\2\2\2sp\3\2\2\2tu\3\2\2\2us\3\2\2\2uv\3\2\2\2vw\3\2\2\2wx\b\2\1\2x\3"+
		"\3\2\2\2yz\7\61\2\2z{\5\24\13\2{|\5\n\6\2|}\7\63\2\2}~\b\3\1\2~\u008a"+
		"\3\2\2\2\177\u0080\b\3\1\2\u0080\u0084\5\24\13\2\u0081\u0082\5\f\7\2\u0082"+
		"\u0083\b\3\1\2\u0083\u0085\3\2\2\2\u0084\u0081\3\2\2\2\u0084\u0085\3\2"+
		"\2\2\u0085\u0086\3\2\2\2\u0086\u0087\7\63\2\2\u0087\u0088\b\3\1\2\u0088"+
		"\u008a\3\2\2\2\u0089y\3\2\2\2\u0089\177\3\2\2\2\u008a\5\3\2\2\2\u008b"+
		"\u008c\b\4\1\2\u008c\u008d\5\24\13\2\u008d\u008e\5\34\17\2\u008e\u0092"+
		"\7\36\2\2\u008f\u0090\5\b\5\2\u0090\u0091\b\4\1\2\u0091\u0093\3\2\2\2"+
		"\u0092\u008f\3\2\2\2\u0092\u0093\3\2\2\2\u0093\u0094\3\2\2\2\u0094\u0095"+
		"\7\22\2\2\u0095\u0096\5\"\22\2\u0096\u0097\b\4\1\2\u0097\7\3\2\2\2\u0098"+
		"\u0099\b\5\1\2\u0099\u009a\5\30\r\2\u009a\u00a1\b\5\1\2\u009b\u009c\7"+
		"\33\2\2\u009c\u009d\5\30\r\2\u009d\u009e\b\5\1\2\u009e\u00a0\3\2\2\2\u009f"+
		"\u009b\3\2\2\2\u00a0\u00a3\3\2\2\2\u00a1\u009f\3\2\2\2\u00a1\u00a2\3\2"+
		"\2\2\u00a2\u00a7\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a4\u00a5\7\33\2\2\u00a5"+
		"\u00a6\7%\2\2\u00a6\u00a8\b\5\1\2\u00a7\u00a4\3\2\2\2\u00a7\u00a8\3\2"+
		"\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00aa\b\5\1\2\u00aa\t\3\2\2\2\u00ab\u00ac"+
		"\b\6\1\2\u00ac\u00ad\5\32\16\2\u00ad\u00b4\b\6\1\2\u00ae\u00af\7\33\2"+
		"\2\u00af\u00b0\5\32\16\2\u00b0\u00b1\b\6\1\2\u00b1\u00b3\3\2\2\2\u00b2"+
		"\u00ae\3\2\2\2\u00b3\u00b6\3\2\2\2\u00b4\u00b2\3\2\2\2\u00b4\u00b5\3\2"+
		"\2\2\u00b5\u00b7\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b7\u00b8\b\6\1\2\u00b8"+
		"\13\3\2\2\2\u00b9\u00ba\b\7\1\2\u00ba\u00bb\5\16\b\2\u00bb\u00c2\b\7\1"+
		"\2\u00bc\u00bd\7\33\2\2\u00bd\u00be\5\16\b\2\u00be\u00bf\b\7\1\2\u00bf"+
		"\u00c1\3\2\2\2\u00c0\u00bc\3\2\2\2\u00c1\u00c4\3\2\2\2\u00c2\u00c0\3\2"+
		"\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c5\3\2\2\2\u00c4\u00c2\3\2\2\2\u00c5"+
		"\u00c6\b\7\1\2\u00c6\r\3\2\2\2\u00c7\u00c8\b\b\1\2\u00c8\u00cd\5\32\16"+
		"\2\u00c9\u00ca\7\23\2\2\u00ca\u00cb\5\20\t\2\u00cb\u00cc\b\b\1\2\u00cc"+
		"\u00ce\3\2\2\2\u00cd\u00c9\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00cf\3\2"+
		"\2\2\u00cf\u00d0\b\b\1\2\u00d0\17\3\2\2\2\u00d1\u00d2\5.\30\2\u00d2\u00d3"+
		"\b\t\1\2\u00d3\u00da\3\2\2\2\u00d4\u00d5\7$\2\2\u00d5\u00d6\5\22\n\2\u00d6"+
		"\u00d7\b\t\1\2\u00d7\u00d8\7\f\2\2\u00d8\u00da\3\2\2\2\u00d9\u00d1\3\2"+
		"\2\2\u00d9\u00d4\3\2\2\2\u00da\21\3\2\2\2\u00db\u00dc\b\n\1\2\u00dc\u00dd"+
		"\5\20\t\2\u00dd\u00e4\b\n\1\2\u00de\u00df\7\33\2\2\u00df\u00e0\5\20\t"+
		"\2\u00e0\u00e1\b\n\1\2\u00e1\u00e3\3\2\2\2\u00e2\u00de\3\2\2\2\u00e3\u00e6"+
		"\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5\u00e7\3\2\2\2\u00e6"+
		"\u00e4\3\2\2\2\u00e7\u00e8\b\n\1\2\u00e8\23\3\2\2\2\u00e9\u00ea\7\"\2"+
		"\2\u00ea\u010c\b\13\1\2\u00eb\u00ec\7\r\2\2\u00ec\u010c\b\13\1\2\u00ed"+
		"\u00ee\7!\2\2\u00ee\u010c\b\13\1\2\u00ef\u00f0\5b\62\2\u00f0\u00f1\b\13"+
		"\1\2\u00f1\u010c\3\2\2\2\u00f2\u00f3\b\13\1\2\u00f3\u00f7\5\26\f\2\u00f4"+
		"\u00f5\5d\63\2\u00f5\u00f6\b\13\1\2\u00f6\u00f8\3\2\2\2\u00f7\u00f4\3"+
		"\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u0100\7$\2\2\u00fa"+
		"\u00fb\5\24\13\2\u00fb\u00fc\b\13\1\2\u00fc\u00fd\5\n\6\2\u00fd\u00fe"+
		"\b\13\1\2\u00fe\u00ff\7\63\2\2\u00ff\u0101\3\2\2\2\u0100\u00fa\3\2\2\2"+
		"\u0101\u0102\3\2\2\2\u0102\u0100\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0104"+
		"\3\2\2\2\u0104\u0105\7\f\2\2\u0105\u0106\b\13\1\2\u0106\u010c\3\2\2\2"+
		"\u0107\u0108\5\26\f\2\u0108\u0109\5d\63\2\u0109\u010a\b\13\1\2\u010a\u010c"+
		"\3\2\2\2\u010b\u00e9\3\2\2\2\u010b\u00eb\3\2\2\2\u010b\u00ed\3\2\2\2\u010b"+
		"\u00ef\3\2\2\2\u010b\u00f2\3\2\2\2\u010b\u0107\3\2\2\2\u010c\25\3\2\2"+
		"\2\u010d\u010e\7*\2\2\u010e\u0112\b\f\1\2\u010f\u0110\7\21\2\2\u0110\u0112"+
		"\b\f\1\2\u0111\u010d\3\2\2\2\u0111\u010f\3\2\2\2\u0112\27\3\2\2\2\u0113"+
		"\u0114\5\24\13\2\u0114\u0115\5\32\16\2\u0115\u0116\b\r\1\2\u0116\31\3"+
		"\2\2\2\u0117\u0118\b\16\1\2\u0118\u0119\5\34\17\2\u0119\u011d\7\36\2\2"+
		"\u011a\u011b\5\b\5\2\u011b\u011c\b\16\1\2\u011c\u011e\3\2\2\2\u011d\u011a"+
		"\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u0120\7\22\2\2"+
		"\u0120\u0121\b\16\1\2\u0121\u0131\3\2\2\2\u0122\u0123\b\16\1\2\u0123\u012b"+
		"\5\34\17\2\u0124\u0125\7\4\2\2\u0125\u0126\5\62\32\2\u0126\u0127\7\31"+
		"\2\2\u0127\u0128\b\16\1\2\u0128\u012a\3\2\2\2\u0129\u0124\3\2\2\2\u012a"+
		"\u012d\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012e\3\2"+
		"\2\2\u012d\u012b\3\2\2\2\u012e\u012f\b\16\1\2\u012f\u0131\3\2\2\2\u0130"+
		"\u0117\3\2\2\2\u0130\u0122\3\2\2\2\u0131\33\3\2\2\2\u0132\u0137\b\17\1"+
		"\2\u0133\u0134\7\5\2\2\u0134\u0136\b\17\1\2\u0135\u0133\3\2\2\2\u0136"+
		"\u0139\3\2\2\2\u0137\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013a\3\2"+
		"\2\2\u0139\u0137\3\2\2\2\u013a\u013b\5d\63\2\u013b\u013c\b\17\1\2\u013c"+
		"\35\3\2\2\2\u013d\u013e\5 \21\2\u013e\u013f\b\20\1\2\u013f\u0150\3\2\2"+
		"\2\u0140\u0141\5\"\22\2\u0141\u0142\b\20\1\2\u0142\u0150\3\2\2\2\u0143"+
		"\u0144\5$\23\2\u0144\u0145\b\20\1\2\u0145\u0150\3\2\2\2\u0146\u0147\5"+
		"&\24\2\u0147\u0148\b\20\1\2\u0148\u0150\3\2\2\2\u0149\u014a\5(\25\2\u014a"+
		"\u014b\b\20\1\2\u014b\u0150\3\2\2\2\u014c\u014d\5*\26\2\u014d\u014e\b"+
		"\20\1\2\u014e\u0150\3\2\2\2\u014f\u013d\3\2\2\2\u014f\u0140\3\2\2\2\u014f"+
		"\u0143\3\2\2\2\u014f\u0146\3\2\2\2\u014f\u0149\3\2\2\2\u014f\u014c\3\2"+
		"\2\2\u0150\37\3\2\2\2\u0151\u0155\b\21\1\2\u0152\u0153\5,\27\2\u0153\u0154"+
		"\b\21\1\2\u0154\u0156\3\2\2\2\u0155\u0152\3\2\2\2\u0155\u0156\3\2\2\2"+
		"\u0156\u0157\3\2\2\2\u0157\u0158\7\63\2\2\u0158\u0159\b\21\1\2\u0159!"+
		"\3\2\2\2\u015a\u015b\b\22\1\2\u015b\u0161\7$\2\2\u015c\u015d\5\4\3\2\u015d"+
		"\u015e\b\22\1\2\u015e\u0160\3\2\2\2\u015f\u015c\3\2\2\2\u0160\u0163\3"+
		"\2\2\2\u0161\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0169\3\2\2\2\u0163"+
		"\u0161\3\2\2\2\u0164\u0165\5\36\20\2\u0165\u0166\b\22\1\2\u0166\u0168"+
		"\3\2\2\2\u0167\u0164\3\2\2\2\u0168\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169"+
		"\u016a\3\2\2\2\u016a\u016c\3\2\2\2\u016b\u0169\3\2\2\2\u016c\u016d\7\f"+
		"\2\2\u016d\u016e\b\22\1\2\u016e#\3\2\2\2\u016f\u0170\b\23\1\2\u0170\u0171"+
		"\7 \2\2\u0171\u0172\7\36\2\2\u0172\u0173\5,\27\2\u0173\u0174\7\22\2\2"+
		"\u0174\u0179\5\36\20\2\u0175\u0176\7)\2\2\u0176\u0177\5\36\20\2\u0177"+
		"\u0178\b\23\1\2\u0178\u017a\3\2\2\2\u0179\u0175\3\2\2\2\u0179\u017a\3"+
		"\2\2\2\u017a\u017b\3\2\2\2\u017b\u017c\b\23\1\2\u017c%\3\2\2\2\u017d\u017e"+
		"\7\34\2\2\u017e\u017f\7\36\2\2\u017f\u0180\5,\27\2\u0180\u0181\7\22\2"+
		"\2\u0181\u0182\5\36\20\2\u0182\u0183\b\24\1\2\u0183\'\3\2\2\2\u0184\u0185"+
		"\b\25\1\2\u0185\u0186\7\60\2\2\u0186\u018a\7\36\2\2\u0187\u0188\5,\27"+
		"\2\u0188\u0189\b\25\1\2\u0189\u018b\3\2\2\2\u018a\u0187\3\2\2\2\u018a"+
		"\u018b\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u0190\7\63\2\2\u018d\u018e\5"+
		",\27\2\u018e\u018f\b\25\1\2\u018f\u0191\3\2\2\2\u0190\u018d\3\2\2\2\u0190"+
		"\u0191\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0196\7\63\2\2\u0193\u0194\5"+
		",\27\2\u0194\u0195\b\25\1\2\u0195\u0197\3\2\2\2\u0196\u0193\3\2\2\2\u0196"+
		"\u0197\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u0199\7\22\2\2\u0199\u019a\5"+
		"\36\20\2\u019a\u019b\b\25\1\2\u019b)\3\2\2\2\u019c\u019d\7\b\2\2\u019d"+
		"\u019e\7\63\2\2\u019e\u01ac\b\26\1\2\u019f\u01a0\7&\2\2\u01a0\u01a1\7"+
		"\63\2\2\u01a1\u01ac\b\26\1\2\u01a2\u01a3\b\26\1\2\u01a3\u01a7\7\62\2\2"+
		"\u01a4\u01a5\5,\27\2\u01a5\u01a6\b\26\1\2\u01a6\u01a8\3\2\2\2\u01a7\u01a4"+
		"\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa\7\63\2\2"+
		"\u01aa\u01ac\b\26\1\2\u01ab\u019c\3\2\2\2\u01ab\u019f\3\2\2\2\u01ab\u01a2"+
		"\3\2\2\2\u01ac+\3\2\2\2\u01ad\u01ae\b\27\1\2\u01ae\u01af\5.\30\2\u01af"+
		"\u01b6\b\27\1\2\u01b0\u01b1\7\33\2\2\u01b1\u01b2\5.\30\2\u01b2\u01b3\b"+
		"\27\1\2\u01b3\u01b5\3\2\2\2\u01b4\u01b0\3\2\2\2\u01b5\u01b8\3\2\2\2\u01b6"+
		"\u01b4\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01b9\3\2\2\2\u01b8\u01b6\3\2"+
		"\2\2\u01b9\u01ba\b\27\1\2\u01ba-\3\2\2\2\u01bb\u01bc\5\62\32\2\u01bc\u01bd"+
		"\b\30\1\2\u01bd\u01c4\3\2\2\2\u01be\u01bf\5T+\2\u01bf\u01c0\5\60\31\2"+
		"\u01c0\u01c1\5.\30\2\u01c1\u01c2\b\30\1\2\u01c2\u01c4\3\2\2\2\u01c3\u01bb"+
		"\3\2\2\2\u01c3\u01be\3\2\2\2\u01c4/\3\2\2\2\u01c5\u01c6\7\23\2\2\u01c6"+
		"\u01dc\b\31\1\2\u01c7\u01c8\7\20\2\2\u01c8\u01dc\b\31\1\2\u01c9\u01ca"+
		"\78\2\2\u01ca\u01dc\b\31\1\2\u01cb\u01cc\7\67\2\2\u01cc\u01dc\b\31\1\2"+
		"\u01cd\u01ce\7\'\2\2\u01ce\u01dc\b\31\1\2\u01cf\u01d0\7\32\2\2\u01d0\u01dc"+
		"\b\31\1\2\u01d1\u01d2\7\30\2\2\u01d2\u01dc\b\31\1\2\u01d3\u01d4\7#\2\2"+
		"\u01d4\u01dc\b\31\1\2\u01d5\u01d6\7\37\2\2\u01d6\u01dc\b\31\1\2\u01d7"+
		"\u01d8\7(\2\2\u01d8\u01dc\b\31\1\2\u01d9\u01da\7\24\2\2\u01da\u01dc\b"+
		"\31\1\2\u01db\u01c5\3\2\2\2\u01db\u01c7\3\2\2\2\u01db\u01c9\3\2\2\2\u01db"+
		"\u01cb\3\2\2\2\u01db\u01cd\3\2\2\2\u01db\u01cf\3\2\2\2\u01db\u01d1\3\2"+
		"\2\2\u01db\u01d3\3\2\2\2\u01db\u01d5\3\2\2\2\u01db\u01d7\3\2\2\2\u01db"+
		"\u01d9\3\2\2\2\u01dc\61\3\2\2\2\u01dd\u01de\b\32\1\2\u01de\u01df\5\64"+
		"\33\2\u01df\u01e6\b\32\1\2\u01e0\u01e1\7\65\2\2\u01e1\u01e2\5\64\33\2"+
		"\u01e2\u01e3\b\32\1\2\u01e3\u01e5\3\2\2\2\u01e4\u01e0\3\2\2\2\u01e5\u01e8"+
		"\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e9\3\2\2\2\u01e8"+
		"\u01e6\3\2\2\2\u01e9\u01ea\b\32\1\2\u01ea\63\3\2\2\2\u01eb\u01ec\b\33"+
		"\1\2\u01ec\u01ed\5\66\34\2\u01ed\u01f4\b\33\1\2\u01ee\u01ef\7\64\2\2\u01ef"+
		"\u01f0\5\66\34\2\u01f0\u01f1\b\33\1\2\u01f1\u01f3\3\2\2\2\u01f2\u01ee"+
		"\3\2\2\2\u01f3\u01f6\3\2\2\2\u01f4\u01f2\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5"+
		"\u01f7\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f7\u01f8\b\33\1\2\u01f8\65\3\2\2"+
		"\2\u01f9\u01fa\b\34\1\2\u01fa\u01fb\58\35\2\u01fb\u0202\b\34\1\2\u01fc"+
		"\u01fd\7\25\2\2\u01fd\u01fe\58\35\2\u01fe\u01ff\b\34\1\2\u01ff\u0201\3"+
		"\2\2\2\u0200\u01fc\3\2\2\2\u0201\u0204\3\2\2\2\u0202\u0200\3\2\2\2\u0202"+
		"\u0203\3\2\2\2\u0203\u0205\3\2\2\2\u0204\u0202\3\2\2\2\u0205\u0206\b\34"+
		"\1\2\u0206\67\3\2\2\2\u0207\u0208\b\35\1\2\u0208\u0209\5:\36\2\u0209\u0210"+
		"\b\35\1\2\u020a\u020b\7-\2\2\u020b\u020c\5:\36\2\u020c\u020d\b\35\1\2"+
		"\u020d\u020f\3\2\2\2\u020e\u020a\3\2\2\2\u020f\u0212\3\2\2\2\u0210\u020e"+
		"\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u0213\3\2\2\2\u0212\u0210\3\2\2\2\u0213"+
		"\u0214\b\35\1\2\u02149\3\2\2\2\u0215\u0216\b\36\1\2\u0216\u0217\5<\37"+
		"\2\u0217\u021e\b\36\1\2\u0218\u0219\7\3\2\2\u0219\u021a\5<\37\2\u021a"+
		"\u021b\b\36\1\2\u021b\u021d\3\2\2\2\u021c\u0218\3\2\2\2\u021d\u0220\3"+
		"\2\2\2\u021e\u021c\3\2\2\2\u021e\u021f\3\2\2\2\u021f\u0221\3\2\2\2\u0220"+
		"\u021e\3\2\2\2\u0221\u0222\b\36\1\2\u0222;\3\2\2\2\u0223\u0224\b\37\1"+
		"\2\u0224\u0225\5@!\2\u0225\u022d\b\37\1\2\u0226\u0227\5> \2\u0227\u0228"+
		"\b\37\1\2\u0228\u0229\5@!\2\u0229\u022a\b\37\1\2\u022a\u022c\3\2\2\2\u022b"+
		"\u0226\3\2\2\2\u022c\u022f\3\2\2\2\u022d\u022b\3\2\2\2\u022d\u022e\3\2"+
		"\2\2\u022e\u0230\3\2\2\2\u022f\u022d\3\2\2\2\u0230\u0231\b\37\1\2\u0231"+
		"=\3\2\2\2\u0232\u0233\79\2\2\u0233\u0237\b \1\2\u0234\u0235\7\t\2\2\u0235"+
		"\u0237\b \1\2\u0236\u0232\3\2\2\2\u0236\u0234\3\2\2\2\u0237?\3\2\2\2\u0238"+
		"\u0239\b!\1\2\u0239\u023a\5D#\2\u023a\u0242\b!\1\2\u023b\u023c\5B\"\2"+
		"\u023c\u023d\b!\1\2\u023d\u023e\5D#\2\u023e\u023f\b!\1\2\u023f\u0241\3"+
		"\2\2\2\u0240\u023b\3\2\2\2\u0241\u0244\3\2\2\2\u0242\u0240\3\2\2\2\u0242"+
		"\u0243\3\2\2\2\u0243\u0245\3\2\2\2\u0244\u0242\3\2\2\2\u0245\u0246\b!"+
		"\1\2\u0246A\3\2\2\2\u0247\u0248\7\6\2\2\u0248\u0250\b\"\1\2\u0249\u024a"+
		"\7\66\2\2\u024a\u0250\b\"\1\2\u024b\u024c\7\n\2\2\u024c\u0250\b\"\1\2"+
		"\u024d\u024e\7<\2\2\u024e\u0250\b\"\1\2\u024f\u0247\3\2\2\2\u024f\u0249"+
		"\3\2\2\2\u024f\u024b\3\2\2\2\u024f\u024d\3\2\2\2\u0250C\3\2\2\2\u0251"+
		"\u0252\b#\1\2\u0252\u0253\5H%\2\u0253\u025b\b#\1\2\u0254\u0255\5F$\2\u0255"+
		"\u0256\b#\1\2\u0256\u0257\5H%\2\u0257\u0258\b#\1\2\u0258\u025a\3\2\2\2"+
		"\u0259\u0254\3\2\2\2\u025a\u025d\3\2\2\2\u025b\u0259\3\2\2\2\u025b\u025c"+
		"\3\2\2\2\u025c\u025e\3\2\2\2\u025d\u025b\3\2\2\2\u025e\u025f\b#\1\2\u025f"+
		"E\3\2\2\2\u0260\u0261\7\13\2\2\u0261\u0265\b$\1\2\u0262\u0263\7,\2\2\u0263"+
		"\u0265\b$\1\2\u0264\u0260\3\2\2\2\u0264\u0262\3\2\2\2\u0265G\3\2\2\2\u0266"+
		"\u0267\b%\1\2\u0267\u0268\5L\'\2\u0268\u0270\b%\1\2\u0269\u026a\5J&\2"+
		"\u026a\u026b\b%\1\2\u026b\u026c\5L\'\2\u026c\u026d\b%\1\2\u026d\u026f"+
		"\3\2\2\2\u026e\u0269\3\2\2\2\u026f\u0272\3\2\2\2\u0270\u026e\3\2\2\2\u0270"+
		"\u0271\3\2\2\2\u0271\u0273\3\2\2\2\u0272\u0270\3\2\2\2\u0273\u0274\b%"+
		"\1\2\u0274I\3\2\2\2\u0275\u0276\7/\2\2\u0276\u027a\b&\1\2\u0277\u0278"+
		"\7\35\2\2\u0278\u027a\b&\1\2\u0279\u0275\3\2\2\2\u0279\u0277\3\2\2\2\u027a"+
		"K\3\2\2\2\u027b\u027c\b\'\1\2\u027c\u027d\5P)\2\u027d\u0285\b\'\1\2\u027e"+
		"\u027f\5N(\2\u027f\u0280\b\'\1\2\u0280\u0281\5P)\2\u0281\u0282\b\'\1\2"+
		"\u0282\u0284\3\2\2\2\u0283\u027e\3\2\2\2\u0284\u0287\3\2\2\2\u0285\u0283"+
		"\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0288\3\2\2\2\u0287\u0285\3\2\2\2\u0288"+
		"\u0289\b\'\1\2\u0289M\3\2\2\2\u028a\u028b\7\5\2\2\u028b\u0291\b(\1\2\u028c"+
		"\u028d\7:\2\2\u028d\u0291\b(\1\2\u028e\u028f\7\16\2\2\u028f\u0291\b(\1"+
		"\2\u0290\u028a\3\2\2\2\u0290\u028c\3\2\2\2\u0290\u028e\3\2\2\2\u0291O"+
		"\3\2\2\2\u0292\u0293\5T+\2\u0293\u0294\b)\1\2\u0294\u029c\3\2\2\2\u0295"+
		"\u0296\7\36\2\2\u0296\u0297\5R*\2\u0297\u0298\7\22\2\2\u0298\u0299\5P"+
		")\2\u0299\u029a\b)\1\2\u029a\u029c\3\2\2\2\u029b\u0292\3\2\2\2\u029b\u0295"+
		"\3\2\2\2\u029cQ\3\2\2\2\u029d\u029e\5\24\13\2\u029e\u02a3\b*\1\2\u029f"+
		"\u02a0\7\5\2\2\u02a0\u02a2\b*\1\2\u02a1\u029f\3\2\2\2\u02a2\u02a5\3\2"+
		"\2\2\u02a3\u02a1\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4S\3\2\2\2\u02a5\u02a3"+
		"\3\2\2\2\u02a6\u02a7\5X-\2\u02a7\u02a8\b+\1\2\u02a8\u02c0\3\2\2\2\u02a9"+
		"\u02aa\7+\2\2\u02aa\u02ab\5T+\2\u02ab\u02ac\b+\1\2\u02ac\u02c0\3\2\2\2"+
		"\u02ad\u02ae\7\7\2\2\u02ae\u02af\5T+\2\u02af\u02b0\b+\1\2\u02b0\u02c0"+
		"\3\2\2\2\u02b1\u02b2\5V,\2\u02b2\u02b3\5P)\2\u02b3\u02b4\b+\1\2\u02b4"+
		"\u02c0\3\2\2\2\u02b5\u02b6\7\27\2\2\u02b6\u02b7\5T+\2\u02b7\u02b8\b+\1"+
		"\2\u02b8\u02c0\3\2\2\2\u02b9\u02ba\7\27\2\2\u02ba\u02bb\7\36\2\2\u02bb"+
		"\u02bc\5R*\2\u02bc\u02bd\7\22\2\2\u02bd\u02be\b+\1\2\u02be\u02c0\3\2\2"+
		"\2\u02bf\u02a6\3\2\2\2\u02bf\u02a9\3\2\2\2\u02bf\u02ad\3\2\2\2\u02bf\u02b1"+
		"\3\2\2\2\u02bf\u02b5\3\2\2\2\u02bf\u02b9\3\2\2\2\u02c0U\3\2\2\2\u02c1"+
		"\u02c2\7\3\2\2\u02c2\u02ce\b,\1\2\u02c3\u02c4\7\5\2\2\u02c4\u02ce\b,\1"+
		"\2\u02c5\u02c6\7/\2\2\u02c6\u02ce\b,\1\2\u02c7\u02c8\7\35\2\2\u02c8\u02ce"+
		"\b,\1\2\u02c9\u02ca\7;\2\2\u02ca\u02ce\b,\1\2\u02cb\u02cc\7\26\2\2\u02cc"+
		"\u02ce\b,\1\2\u02cd\u02c1\3\2\2\2\u02cd\u02c3\3\2\2\2\u02cd\u02c5\3\2"+
		"\2\2\u02cd\u02c7\3\2\2\2\u02cd\u02c9\3\2\2\2\u02cd\u02cb\3\2\2\2\u02ce"+
		"W\3\2\2\2\u02cf\u02d0\b-\1\2\u02d0\u02d6\5^\60\2\u02d1\u02d2\5Z.\2\u02d2"+
		"\u02d3\b-\1\2\u02d3\u02d5\3\2\2\2\u02d4\u02d1\3\2\2\2\u02d5\u02d8\3\2"+
		"\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d9\3\2\2\2\u02d8"+
		"\u02d6\3\2\2\2\u02d9\u02da\b-\1\2\u02daY\3\2\2\2\u02db\u02dc\7\4\2\2\u02dc"+
		"\u02dd\5,\27\2\u02dd\u02de\7\31\2\2\u02de\u02df\b.\1\2\u02df\u02f5\3\2"+
		"\2\2\u02e0\u02e1\7\36\2\2\u02e1\u02e2\7\22\2\2\u02e2\u02f5\b.\1\2\u02e3"+
		"\u02e4\7\36\2\2\u02e4\u02e5\5\\/\2\u02e5\u02e6\7\22\2\2\u02e6\u02e7\b"+
		".\1\2\u02e7\u02f5\3\2\2\2\u02e8\u02e9\7.\2\2\u02e9\u02ea\5d\63\2\u02ea"+
		"\u02eb\b.\1\2\u02eb\u02f5\3\2\2\2\u02ec\u02ed\7\17\2\2\u02ed\u02ee\5d"+
		"\63\2\u02ee\u02ef\b.\1\2\u02ef\u02f5\3\2\2\2\u02f0\u02f1\7+\2\2\u02f1"+
		"\u02f5\b.\1\2\u02f2\u02f3\7\7\2\2\u02f3\u02f5\b.\1\2\u02f4\u02db\3\2\2"+
		"\2\u02f4\u02e0\3\2\2\2\u02f4\u02e3\3\2\2\2\u02f4\u02e8\3\2\2\2\u02f4\u02ec"+
		"\3\2\2\2\u02f4\u02f0\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f5[\3\2\2\2\u02f6"+
		"\u02f7\b/\1\2\u02f7\u02f8\5.\30\2\u02f8\u02ff\b/\1\2\u02f9\u02fa\7\33"+
		"\2\2\u02fa\u02fb\5.\30\2\u02fb\u02fc\b/\1\2\u02fc\u02fe\3\2\2\2\u02fd"+
		"\u02f9\3\2\2\2\u02fe\u0301\3\2\2\2\u02ff\u02fd\3\2\2\2\u02ff\u0300\3\2"+
		"\2\2\u0300\u0302\3\2\2\2\u0301\u02ff\3\2\2\2\u0302\u0303\b/\1\2\u0303"+
		"]\3\2\2\2\u0304\u0305\5d\63\2\u0305\u0306\b\60\1\2\u0306\u0313\3\2\2\2"+
		"\u0307\u0308\5`\61\2\u0308\u0309\b\60\1\2\u0309\u0313\3\2\2\2\u030a\u030b"+
		"\5f\64\2\u030b\u030c\b\60\1\2\u030c\u0313\3\2\2\2\u030d\u030e\7\36\2\2"+
		"\u030e\u030f\5,\27\2\u030f\u0310\7\22\2\2\u0310\u0311\b\60\1\2\u0311\u0313"+
		"\3\2\2\2\u0312\u0304\3\2\2\2\u0312\u0307\3\2\2\2\u0312\u030a\3\2\2\2\u0312"+
		"\u030d\3\2\2\2\u0313_\3\2\2\2\u0314\u0315\5h\65\2\u0315\u0316\b\61\1\2"+
		"\u0316\u031b\3\2\2\2\u0317\u0318\5j\66\2\u0318\u0319\b\61\1\2\u0319\u031b"+
		"\3\2\2\2\u031a\u0314\3\2\2\2\u031a\u0317\3\2\2\2\u031ba\3\2\2\2\u031c"+
		"\u031d\7C\2\2\u031d\u031e\b\62\1\2\u031ec\3\2\2\2\u031f\u0320\7C\2\2\u0320"+
		"\u0321\b\63\1\2\u0321e\3\2\2\2\u0322\u0323\7B\2\2\u0323\u0324\b\64\1\2"+
		"\u0324g\3\2\2\2\u0325\u0326\7=\2\2\u0326\u0327\b\65\1\2\u0327i\3\2\2\2"+
		"\u0328\u0329\7>\2\2\u0329\u032a\b\66\1\2\u032ak\3\2\2\2;su\u0084\u0089"+
		"\u0092\u00a1\u00a7\u00b4\u00c2\u00cd\u00d9\u00e4\u00f7\u0102\u010b\u0111"+
		"\u011d\u012b\u0130\u0137\u014f\u0155\u0161\u0169\u0179\u018a\u0190\u0196"+
		"\u01a7\u01ab\u01b6\u01c3\u01db\u01e6\u01f4\u0202\u0210\u021e\u022d\u0236"+
		"\u0242\u024f\u025b\u0264\u0270\u0279\u0285\u0290\u029b\u02a3\u02bf\u02cd"+
		"\u02d6\u02f4\u02ff\u0312\u031a";
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
	}
}