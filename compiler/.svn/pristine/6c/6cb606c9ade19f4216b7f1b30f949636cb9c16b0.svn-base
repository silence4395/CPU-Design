package bigproject.assem;

import java.io.BufferedWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import bigproject.analysis.LiveInterval;
import bigproject.interm.Interm;
import bigproject.main.RegConst;
import bigproject.regalloc.RegAlloc;
import bigproject.translate.CompUnit;
import bigproject.translate.Temp;

public class Codegen {

	public List<Assem> inits = null;
	public List<String> lines = null;
	private List<Assem> assems = null;
	
	public Codegen() {
		inits = new ArrayList<Assem>();
		lines = new ArrayList<String>();
	}
	
	public void gen(Assem a) {
		inits.add(a);
	}
	
	public void gen(List<Assem> a) {
		inits.addAll(a);
	}
	
	private void gen(List<Interm> interms, RegAlloc alloc) {
		
		for (Interm interm: interms) {
			assems.addAll(interm.gen());
		}
		
		for (Assem assem: assems) {
			lines.add(assem.toString(alloc));
		}
	}
	
	public void gen(CompUnit unit, RegAlloc alloc) {
		assems = new ArrayList<Assem>();
		loadGlobalVar(unit, alloc);
		gen(unit.interms, alloc);
		saveGlobalVar(unit, alloc);
	}

	private void saveGlobalVar(CompUnit unit, RegAlloc alloc) {
		List<Temp> globalvars = new ArrayList<Temp>();
		for (Interm interm: unit.interms)
			for (Temp temp: interm.def())
				if (temp.level.depth == 0)
					globalvars.add(temp);
		for (Temp temp: globalvars) {
			LiveInterval i = temp.getLiveInterval();
			if (!i.spilled) {
				assems.add(new Assem(
					"sw $" + RegConst.RegNames[i.register] + ", " + 4 * temp.index + "($gp)"
				));
			}
		}
	}

	private void loadGlobalVar(CompUnit unit, RegAlloc alloc) {
		List<Temp> globalvars = new ArrayList<Temp>();
		for (Interm interm: unit.interms)
			for (Temp temp: interm.use())
				if (temp.level.depth == 0)
					globalvars.add(temp);
		for (Temp temp: globalvars) {
			LiveInterval i = temp.getLiveInterval();
			if (!i.spilled) {
				assems.add(new Assem(
					"lw $" + RegConst.RegNames[i.register] + ", " + 4 * temp.index + "($gp)"
				));
			}
		}
	}

	public void printToFile(BufferedWriter writer) throws IOException {
		for (Assem init: inits) {
			writer.write(init.toString());
			writer.newLine();
		}
		for (String line: lines) {
			writer.write(line);
			writer.newLine();
		}
	}
}
