	.data
	.align 2
L11:
	.asciiz "%d "
	.align 2
L12:
	.asciiz "\n"
	.align 2
	.text
	.align 2
	.globl main
main:
	jal cmain
	li $v0, 10
	syscall
L7_printBoard:
	sw $ra, -4($sp)
	addiu $sp, $sp, -120
	move $k0, $a0
	sw $k0, 0($sp)
	move $k0, $a1
	sw $k0, 4($sp)
	li $k0, 0
	sw $k0, 8($sp)
L9:
	lw $k0, 8($sp)
	lw $k1, 0($sp)
	slt $fp, $k0, $k1
	sw $fp, 16($sp)
	lw $k0, 16($sp)
	beqz $k0, L10
	la $k0, L11
	sw $k0, 20($sp)
	lw $k0, 4($sp)
	move $k1, $k0
	sw $k1, 24($sp)
	lw $k0, 8($sp)
	mul $k1, $k0, 4
	sw $k1, 28($sp)
	lw $k0, 24($sp)
	lw $k1, 28($sp)
	add $fp, $k0, $k1
	sw $fp, 32($sp)
	lw $k0, 24($sp)
	lw $k0, 0($k0)
	sw $k0, 24($sp)
	lw $k0, 24($sp)
	lw $k0, 0($k0)
	sw $k0, 24($sp)
	lw $k0, 20($sp)
	move $a0, $k0
	lw $k0, 24($sp)
	move $a1, $k0
	jal printf
	lw $k0, 8($sp)
	move $k1, $k0
	sw $k1, 36($sp)
	lw $k0, 8($sp)
	addi $k0, $k0, 1
	sw $k0, 8($sp)
	j L9
L10:
	la $k0, L12
	sw $k0, 40($sp)
	lw $k0, 40($sp)
	move $a0, $k0
	jal printf
	li $v0, 0
	j L8
L8:
	addiu $sp, $sp, 120
	lw $ra, -4($sp)
	jr $ra
cmain:
	sw $ra, -4($sp)
	addiu $sp, $sp, -232
	li $k0, 3
	sw $k0, 0($sp)
	lw $k0, 0($sp)
	mul $k1, $k0, 4
	sw $k1, 16($sp)
	lw $k0, 16($sp)
	move $a0, $k0
	jal malloc
	move $k0, $v0
	sw $k0, 20($sp)
	lw $k0, 20($sp)
	move $k1, $k0
	sw $k1, 8($sp)
	lw $k0, 8($sp)
	move $k1, $k0
	sw $k1, 24($sp)
	li $k0, 0
	sw $k0, 28($sp)
	lw $k0, 24($sp)
	lw $k1, 28($sp)
	add $k0, $k0, $k1
	sw $k0, 24($sp)
	li $k0, 1
	sw $k0, 32($sp)
	lw $k0, 32($sp)
	lw $k1, 24($sp)
	sw $k0, 0($k1)
	li $k0, 1
	sw $k0, 4($sp)
L15:
	lw $k0, 4($sp)
	lw $k1, 0($sp)
	sle $fp, $k0, $k1
	sw $fp, 36($sp)
	lw $k0, 36($sp)
	beqz $k0, L16
	lw $k0, 8($sp)
	move $k1, $k0
	sw $k1, 40($sp)
	lw $k0, 4($sp)
	sub $k1, $k0, 1
	sw $k1, 44($sp)
	lw $k0, 44($sp)
	mul $k1, $k0, 4
	sw $k1, 48($sp)
	lw $k0, 40($sp)
	lw $k1, 48($sp)
	add $fp, $k0, $k1
	sw $fp, 52($sp)
	lw $k0, 52($sp)
	lw $k1, 0($k0)
	sw $k1, 40($sp)
	lw $k0, 40($sp)
	mul $k1, $k0, 2
	sw $k1, 56($sp)
	lw $k0, 8($sp)
	move $k1, $k0
	sw $k1, 60($sp)
	lw $k0, 4($sp)
	mul $k1, $k0, 4
	sw $k1, 64($sp)
	lw $k0, 60($sp)
	lw $k1, 64($sp)
	add $k0, $k0, $k1
	sw $k0, 60($sp)
	lw $k0, 56($sp)
	lw $k1, 60($sp)
	sw $k0, 0($k1)
	lw $k0, 4($sp)
	move $k1, $k0
	sw $k1, 68($sp)
	lw $k0, 4($sp)
	addi $k0, $k0, 1
	sw $k0, 4($sp)
	j L15
L16:
	lw $k0, 8($sp)
	move $k1, $k0
	sw $k1, 72($sp)
	lw $k0, 0($sp)
	mul $k1, $k0, 4
	sw $k1, 76($sp)
	lw $k0, 72($sp)
	lw $k1, 76($sp)
	add $fp, $k0, $k1
	sw $fp, 80($sp)
	lw $k0, 80($sp)
	lw $k1, 0($k0)
	sw $k1, 72($sp)
	lw $k0, 72($sp)
	mul $k1, $k0, 4
	sw $k1, 84($sp)
	lw $k0, 84($sp)
	move $a0, $k0
	jal malloc
	move $k0, $v0
	sw $k0, 88($sp)
	lw $k0, 88($sp)
	move $k1, $k0
	sw $k1, 12($sp)
	li $k0, 0
	sw $k0, 4($sp)
L17:
	lw $k0, 8($sp)
	move $k1, $k0
	sw $k1, 96($sp)
	lw $k0, 0($sp)
	mul $k1, $k0, 4
	sw $k1, 100($sp)
	lw $k0, 96($sp)
	lw $k1, 100($sp)
	add $fp, $k0, $k1
	sw $fp, 104($sp)
	lw $k0, 104($sp)
	lw $k1, 0($k0)
	sw $k1, 96($sp)
	lw $k0, 4($sp)
	lw $k1, 96($sp)
	slt $fp, $k0, $k1
	sw $fp, 92($sp)
	lw $k0, 92($sp)
	beqz $k0, L18
	lw $k0, 8($sp)
	move $k1, $k0
	sw $k1, 108($sp)
	lw $k0, 0($sp)
	mul $k1, $k0, 4
	sw $k1, 112($sp)
	lw $k0, 108($sp)
	lw $k1, 112($sp)
	add $fp, $k0, $k1
	sw $fp, 116($sp)
	lw $k0, 116($sp)
	lw $k1, 0($k0)
	sw $k1, 108($sp)
	lw $k0, 108($sp)
	mul $k1, $k0, 4
	sw $k1, 120($sp)
	lw $k0, 120($sp)
	move $a0, $k0
	jal malloc
	move $k0, $v0
	sw $k0, 124($sp)
	lw $k0, 12($sp)
	move $k1, $k0
	sw $k1, 128($sp)
	lw $k0, 4($sp)
	mul $k1, $k0, 4
	sw $k1, 132($sp)
	lw $k0, 128($sp)
	lw $k1, 132($sp)
	add $k0, $k0, $k1
	sw $k0, 128($sp)
	lw $k0, 124($sp)
	lw $k1, 128($sp)
	sw $k0, 0($k1)
	lw $k0, 4($sp)
	move $k1, $k0
	sw $k1, 136($sp)
	lw $k0, 4($sp)
	addi $k0, $k0, 1
	sw $k0, 4($sp)
	j L17
L18:
	lw $k0, 8($sp)
	move $k1, $k0
	sw $k1, 140($sp)
	lw $k0, 0($sp)
	mul $k1, $k0, 4
	sw $k1, 144($sp)
	lw $k0, 140($sp)
	lw $k1, 144($sp)
	add $fp, $k0, $k1
	sw $fp, 148($sp)
	lw $k0, 148($sp)
	lw $k1, 0($k0)
	sw $k1, 140($sp)
	lw $k0, 140($sp)
	move $a0, $k0
	lw $k0, 12($sp)
	move $a1, $k0
	jal L7_printBoard
	move $k0, $v0
	sw $k0, 152($sp)
	li $v0, 0
	j L14
L14:
	addiu $sp, $sp, 232
	lw $ra, -4($sp)
	jr $ra
malloc:
	li $v0, 9
	syscall
	jr $ra
	
## Daniel J. Ellard -- 03/13/94
## printf.asm--
## an implementation of a simple printf work-alike.

## printf--
## A simple printf-like function. Understands just the basic forms
## of the %s, %d, %c, and %% formats, and can only have 3 embedded
## formats (so that all of the parameters are passed in registers).
## If there are more than 3 embedded formats, all but the first 3 are
## completely ignored (not even printed).
## Register Usage:
## $a0,$s0 - pointer to format string
## $a1,$s1 - format argument 1 (optional)
## $a2,$s2 - format argument 2 (optional)
## $a3,$s3 - format argument 3 (optional)
## $s4 - count of formats processed.
## $s5 - char at $s4.
## $s6 - pointer to printf buffer
##
.text
.globl printf
printf:
subu $sp, $sp, 36 # set up the stack frame,
sw $ra, 32($sp) # saving the local environment.
sw $fp, 28($sp)
sw $s0, 24($sp)
sw $s1, 20($sp)
sw $s2, 16($sp)
sw $s3, 12($sp)
sw $s4, 8($sp)
sw $s5, 4($sp)
sw $s6, 0($sp)
addu $fp, $sp, 36

# grab the arguments:
move $s0, $a0 # fmt string
move $s1, $a1 # arg1 (optional)
move $s2, $a2 # arg2 (optional)
move $s3, $a3 # arg3 (optional)

li $s4, 0 # set # of formats = 0
la $s6, printf_buf # set s6 = base of printf buffer.

printf_loop: # process each character in the fmt:
lb $s5, 0($s0) # get the next character, and then
addu $s0, $s0, 1 # bump up $s0 to the next character.

beq $s5, '%', printf_fmt # if the fmt character, then do fmt.
beq $0, $s5, printf_end # if zero, then go to end.

printf_putc:
sb $s5, 0($s6) # otherwise, just put this char
sb $0, 1($s6) # into the printf buffer,
move $a0, $s6 # and then print it with the
li $v0, 4 # print_str syscall
syscall

b printf_loop # loop on.

printf_fmt:
lb $s5, 0($s0) # see what the fmt character is,
addu $s0, $s0, 1 # and bump up the pointer.

beq $s4, 3, printf_loop # if we've already processed 3 args,
# then *ignore* this fmt.
beq $s5, 'd', printf_int # if 'd', print as a decimal integer.
beq $s5, 's', printf_str # if 's', print as a string.
beq $s5, 'c', printf_char # if 'c', print as a ASCII char.
beq $s5, '%', printf_perc # if '%', print a '%'
b printf_loop # otherwise, just continue.

printf_shift_args: # shift over the fmt args,
move $s1, $s2 # $s1 = $s2
move $s2, $s3 # $s2 = $s3

add $s4, $s4, 1 # increment # of args processed.

b printf_loop # and continue the main loop.

printf_int: # deal with a %d:
move $a0, $s1 # do a print_int syscall of $s1.
li $v0, 1
syscall
b printf_shift_args # branch to printf_shift_args

printf_str: # deal with a %s:
move $a0, $s1 # do a print_string syscall of $s1.
li $v0, 4
syscall
b printf_shift_args # branch to printf_shift_args

printf_char: # deal with a %c:
sb $s1, 0($s6) # fill the buffer in with byte $s1,
sb $0, 1($s6) # and then a null.
move $a0, $s6 # and then do a print_str syscall
li $v0, 4 # on the buffer.
syscall
b printf_shift_args # branch to printf_shift_args

printf_perc: # deal with a %%:
li $s5, '%' # (this is redundant)
sb $s5, 0($s6) # fill the buffer in with byte %,
sb $0, 1($s6) # and then a null.
move $a0, $s6 # and then do a print_str syscall
li $v0, 4 # on the buffer.
syscall
b printf_loop # branch to printf_loop

printf_end:
lw $ra, 32($sp) # restore the prior environment:
lw $fp, 28($sp)
lw $s0, 24($sp)
lw $s1, 20($sp)
lw $s2, 16($sp)
lw $s3, 12($sp)
lw $s4, 8($sp)
lw $s5, 4($sp)
lw $s6, 0($sp)
addu $sp, $sp, 36 # release the stack frame.
jr $ra # return.

.data
printf_buf: .space 2

## end of printf.asm
