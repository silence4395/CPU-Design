[@0,56:58='int',<31>,6:0]
[@1,60:66='nfactor',<65>,6:4]
[@2,67:67='(',<28>,6:11]
[@3,68:70='int',<31>,6:12]
[@4,72:72='n',<65>,6:16]
[@5,73:73=')',<16>,6:17]
[@6,75:75='{',<34>,6:19]
[@7,79:80='if',<30>,7:2]
[@8,82:82='(',<28>,7:5]
[@9,83:83='n',<65>,7:6]
[@10,85:86='==',<55>,7:8]
[@11,88:88='0',<59>,7:11]
[@12,89:89=')',<16>,7:12]
[@13,91:96='return',<48>,7:14]
[@14,98:98='1',<59>,7:21]
[@15,99:99=';',<49>,7:22]
[@16,103:106='else',<39>,8:2]
[@17,108:113='return',<48>,8:7]
[@18,115:115='n',<65>,8:14]
[@19,117:117='*',<3>,8:16]
[@20,119:125='nfactor',<65>,8:18]
[@21,126:126='(',<28>,8:25]
[@22,127:127='n',<65>,8:26]
[@23,129:129='-',<27>,8:28]
[@24,131:131='1',<59>,8:30]
[@25,132:132=')',<16>,8:31]
[@26,133:133=';',<49>,8:32]
[@27,135:135='}',<10>,9:0]
[@28,138:140='int',<31>,11:0]
[@29,142:145='main',<65>,11:4]
[@30,146:146='(',<28>,11:8]
[@31,147:147=')',<16>,11:9]
[@32,149:149='{',<34>,11:11]
[@33,153:155='int',<31>,12:2]
[@34,157:157='a',<65>,12:6]
[@35,159:159='=',<17>,12:8]
[@36,161:167='nfactor',<65>,12:10]
[@37,168:168='(',<28>,12:17]
[@38,169:169='6',<59>,12:18]
[@39,170:170=')',<16>,12:19]
[@40,171:171=';',<49>,12:20]
[@41,175:180='printf',<65>,13:2]
[@42,181:181='(',<28>,13:8]
[@43,182:187='"%d\n"',<64>,13:9]
[@44,188:188=',',<25>,13:15]
[@45,190:190='a',<65>,13:17]
[@46,191:191=')',<16>,13:18]
[@47,192:192=';',<49>,13:19]
[@48,196:201='return',<48>,14:2]
[@49,203:203='a',<65>,14:9]
[@50,204:204=';',<49>,14:10]
[@51,206:206='}',<10>,15:0]
[@52,208:207='<EOF>',<-1>,16:0]
(program (function_definition (type_specifier int) (plain_declarator (identifier nfactor)) ( (parameters (plain_declaration (type_specifier int) (declarator (plain_declarator (identifier n))))) ) (compound_statement { (statement (selection_statement if ( (expression (assignment_expression (logical_or_expression (logical_and_expression (inclusive_or_expression (exclusive_or_expression (and_expression (equality_expression (relational_expression (shift_expression (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (identifier n))))))))) (equality_operator ==) (equality_expression (relational_expression (shift_expression (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (constant (integer_constant 0))))))))))))))))))) ) (statement (jump_statement return (expression (assignment_expression (logical_or_expression (logical_and_expression (inclusive_or_expression (exclusive_or_expression (and_expression (equality_expression (relational_expression (shift_expression (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (constant (integer_constant 1)))))))))))))))))) ;)) else (statement (jump_statement return (expression (assignment_expression (logical_or_expression (logical_and_expression (inclusive_or_expression (exclusive_or_expression (and_expression (equality_expression (relational_expression (shift_expression (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (identifier n))))) (multiplicative_operator *) (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (identifier nfactor)) (postfix ( (arguments (assignment_expression (logical_or_expression (logical_and_expression (inclusive_or_expression (exclusive_or_expression (and_expression (equality_expression (relational_expression (shift_expression (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (identifier n)))))) (additive_operator -) (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (constant (integer_constant 1))))))))))))))))))) )))))))))))))))))) ;)))) })) (function_definition (type_specifier int) (plain_declarator (identifier main)) ( ) (compound_statement { (declaration (type_specifier int) (init_declarators (init_declarator (declarator (plain_declarator (identifier a))) = (initializer (assignment_expression (logical_or_expression (logical_and_expression (inclusive_or_expression (exclusive_or_expression (and_expression (equality_expression (relational_expression (shift_expression (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (identifier nfactor)) (postfix ( (arguments (assignment_expression (logical_or_expression (logical_and_expression (inclusive_or_expression (exclusive_or_expression (and_expression (equality_expression (relational_expression (shift_expression (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (constant (integer_constant 6)))))))))))))))))) ))))))))))))))))))) ;) (statement (expression_statement (expression (assignment_expression (logical_or_expression (logical_and_expression (inclusive_or_expression (exclusive_or_expression (and_expression (equality_expression (relational_expression (shift_expression (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (identifier printf)) (postfix ( (arguments (assignment_expression (logical_or_expression (logical_and_expression (inclusive_or_expression (exclusive_or_expression (and_expression (equality_expression (relational_expression (shift_expression (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (string "%d\n")))))))))))))))) , (assignment_expression (logical_or_expression (logical_and_expression (inclusive_or_expression (exclusive_or_expression (and_expression (equality_expression (relational_expression (shift_expression (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (identifier a))))))))))))))))) ))))))))))))))))) ;)) (statement (jump_statement return (expression (assignment_expression (logical_or_expression (logical_and_expression (inclusive_or_expression (exclusive_or_expression (and_expression (equality_expression (relational_expression (shift_expression (additive_expression (multiplicative_expression (cast_expression (unary_expression (postfix_expression (primary_expression (identifier a))))))))))))))))) ;)) })))
