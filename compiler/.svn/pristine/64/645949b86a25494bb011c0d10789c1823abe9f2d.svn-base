package bigproject.interm;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import bigproject.assem.Assem;
import bigproject.main.RegConst;
import bigproject.translate.Addr;
import bigproject.translate.Const;
import bigproject.translate.Temp;

public class Malloc extends Interm {
	
	public Temp addr = null;
	public Addr size = null;
	
	public Malloc(Temp a, Addr b) {
		addr = a;
		size = b;
	}
	
	public String toString() {
		return addr + " = malloc(" + size + ")";
	}
	
	@Override
	public List<Assem> gen() {
		List<Assem> result = new ArrayList<Assem>();
		if (size instanceof Const) {
			result.add(new Assem(
				"move $@, %", RegConst.RegNames[RegConst.ParamRegBase], ((Const) size).value
			));
		} if (size instanceof Temp) {
			result.add(new Assem(
				"move $@, %", RegConst.RegNames[RegConst.ParamRegBase], size
			));
		}
		result.add(new Assem("li $v0, 9"));
		result.add(new Assem("syscall"));
		result.add(new Assem("move @, $v0", addr));
		return result;
	}
	
	@Override
	public Set<Temp> def() {
		Set<Temp> set = new HashSet<Temp>();
		set.add(addr);
		return set;
	}
	
	@Override
	public Set<Temp> use() {
		Set<Temp> set = new HashSet<Temp>();
		if (size instanceof Temp)
			set.add((Temp) size);
		return set;
	}

}
