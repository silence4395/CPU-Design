	.data
	.align 2
L9:
	.asciiz "%d"
	.align 2
L10:
	.asciiz "\n"
	.align 2
L29:
	.asciiz "\n"
	.align 2
	.text
	.align 2
	.globl main
main:
	jal cmain
	li $v0, 10
	syscall
L7_printNum:
	sw $ra, -4($sp)
	addiu $sp, $sp, -88
	sw $t0, 12($sp)
	sw $t1, 16($sp)
	move $t0, $a0
	la $t1, L9
	move $a0, $t1
	move $a1, $t0
	jal printf
	la $t0, L10
	move $a0, $t0
	jal printf
	lw $t0, 12($sp)
	lw $t1, 16($sp)
	addiu $sp, $sp, 88
	lw $ra, -4($sp)
	jr $ra
cmain:
	sw $ra, -4($sp)
	addiu $sp, $sp, -368
	sw $t0, 292($sp)
	sw $t1, 296($sp)
	sw $t2, 300($sp)
	sw $t3, 304($sp)
	sw $t4, 308($sp)
	sw $t5, 312($sp)
	sw $t6, 316($sp)
	sw $t7, 320($sp)
	li $t0, 16
	move $a0, $t0
	jal malloc
	move $t1, $v0
	move $t0, $t1
	li $t1, 0
L13:
	bge $t1, 10, L14
	li $t2, 40
	move $a0, $t2
	jal malloc
	move $t3, $v0
	move $t2, $t0
	mul $t4, $t1, 4
	add $t2, $t2, $t4
	sw $t3, 0($t2)
	addi $t2, $t1, 1
	move $t1, $t2
	j L13
L14:
	li $t1, 0
L15:
	bge $t1, 4, L16
	li $t2, 0
L17:
	bge $t2, 10, L18
	move $t3, $t0
	mul $t4, $t1, 4
	add $t5, $t3, $t4
	lw $t3, 0($t5)
	mul $t4, $t2, 4
	add $t3, $t3, $t4
	li $t4, 888
	sw $t4, 0($t3)
	addi $t3, $t2, 1
	move $t2, $t3
	j L17
L18:
	addi $t3, $t1, 1
	move $t1, $t3
	j L15
L16:
	li $t3, 8
	mul $t4, $t3, 5
	move $a0, $t4
	jal malloc
	move $t3, $v0
	move $t4, $t3
	li $t1, 0
L19:
	bge $t1, 5, L20
	li $t3, -1
	move $t5, $t4
	li $t6, 8
	mul $t6, $t1, $t6
	add $t5, $t5, $t6
	li $t6, 0
	add $t5, $t5, $t6
	sw $t3, 0($t5)
	addi $t3, $t1, 1
	move $t1, $t3
	j L19
L20:
	move $t3, $t0
	lw $t3, 12($t3)
	lw $t3, 36($t3)
	move $a0, $t3
	jal L7_printNum
	move $t5, $v0
	li $t1, 0
L21:
	bgt $t1, 3, L22
	li $t2, 0
L23:
	bgt $t2, 9, L24
	mul $t3, $t1, 10
	add $t5, $t3, $t2
	move $t3, $t0
	mul $t6, $t1, 4
	add $t7, $t3, $t6
	lw $t3, 0($t7)
	mul $t6, $t2, 4
	add $t3, $t3, $t6
	sw $t5, 0($t3)
	addi $t3, $t2, 1
	move $t2, $t3
	j L23
L24:
	addi $t3, $t1, 1
	move $t1, $t3
	j L21
L22:
	li $t1, 0
L25:
	bgt $t1, 3, L26
	li $t2, 0
L27:
	bgt $t2, 9, L28
	move $t3, $t0
	mul $t5, $t1, 4
	add $t6, $t3, $t5
	lw $t3, 0($t6)
	mul $t5, $t2, 4
	add $t6, $t3, $t5
	lw $t3, 0($t6)
	move $a0, $t3
	jal L7_printNum
	move $t5, $v0
	addi $t3, $t2, 1
	move $t2, $t3
	j L27
L28:
	addi $t2, $t1, 1
	move $t1, $t2
	j L25
L26:
	move $t1, $t0
	lw $t1, 8($t1)
	addi $t1, $t1, 40
	li $t2, 0
	sw $t2, 0($t1)
	move $t1, $t0
	lw $t1, 8($t1)
	lw $t1, 40($t1)
	move $a0, $t1
	jal L7_printNum
	move $t2, $v0
	la $t1, L29
	move $a0, $t1
	jal printf
	li $t1, -2
	move $t2, $t4
	li $t3, 8
	mul $t3, $t3, 0
	add $t2, $t2, $t3
	li $t3, 0
	add $t2, $t2, $t3
	sw $t1, 0($t2)
	li $t1, -10
	move $t2, $t4
	move $t3, $t0
	lw $t3, 8($t3)
	lw $t3, 40($t3)
	li $t0, 8
	mul $t0, $t3, $t0
	add $t2, $t2, $t0
	li $t0, 0
	add $t2, $t2, $t0
	sw $t1, 0($t2)
	move $t0, $t4
	li $t1, 8
	mul $t1, $t1, 0
	add $t0, $t0, $t1
	lw $t0, 0($t0)
	move $a0, $t0
	jal L7_printNum
	move $t1, $v0
	move $t0, $t4
	li $t1, 8
	mul $t1, $t1, 1
	add $t0, $t0, $t1
	lw $t0, 0($t0)
	move $a0, $t0
	jal L7_printNum
	move $t1, $v0
	li $v0, 0
	j L12
L12:
	lw $t0, 292($sp)
	lw $t1, 296($sp)
	lw $t2, 300($sp)
	lw $t3, 304($sp)
	lw $t4, 308($sp)
	lw $t5, 312($sp)
	lw $t6, 316($sp)
	lw $t7, 320($sp)
	addiu $sp, $sp, 368
	lw $ra, -4($sp)
	jr $ra
malloc:
	li $v0, 9
	syscall
	jr $ra
	

.text
.globl printf
printf:
subu $sp, $sp, 44 # set up the stack frame,
sw $ra, 32($sp) # saving the local environment.
sw $fp, 28($sp)
sw $s0, 24($sp)
sw $s1, 20($sp)
sw $s2, 16($sp)
sw $s3, 12($sp)
sw $s4, 8($sp)
sw $s5, 4($sp)
sw $s6, 0($sp)
sw $s7, 36($sp)
sw $t0, 40($sp)
addu $fp, $sp, 44

# grab the arguments:
move $s0, $a0 # fmt string
move $s1, $a1 # arg1 (optional)
move $s2, $a2 # arg2 (optional)
move $s3, $a3 # arg3 (optional)
lw $t0, 44($sp)

li $s4, 0 # set # of formats = 0
la $s6, printf_buf # set s6 = base of printf buffer.

printf_loop: # process each character in the fmt:
lb $s5, 0($s0) # get the next character, and then
addu $s0, $s0, 1 # bump up $s0 to the next character.

beq $s5, '%', printf_fmt # if the fmt character, then do fmt.
beq $0, $s5, printf_end # if zero, then go to end.

printf_putc:
sb $s5, 0($s6) # otherwise, just put this char
sb $0, 1($s6) # into the printf buffer,
move $a0, $s6 # and then print it with the
li $v0, 4 # print_str syscall
syscall

b printf_loop # loop on.

printf_fmt:
lb $s5, 0($s0) # see what the fmt character is,
addu $s0, $s0, 1 # and bump up the pointer.

beq $s4, 4, printf_loop # if we've already processed 4 args,
# then *ignore* this fmt.
beq $s5, 'd', printf_int # if 'd', print as a decimal integer.
beq $s5, 's', printf_str # if 's', print as a string.
beq $s5, 'c', printf_char # if 'c', print as a ASCII char.
beq $s5, '0', printf_prefix # if '0', print as a '0'-prefix dectimal integer.
beq $s5, '%', printf_perc # if '%', print a '%'
b printf_loop # otherwise, just continue.

printf_shift_args: # shift over the fmt args,
move $s1, $s2 # $s1 = $s2
move $s2, $s3 # $s2 = $s3
move $s3, $t0 # $s3 = $t0

add $s4, $s4, 1 # increment # of args processed.

b printf_loop # and continue the main loop.

printf_prefix: # deal with a %0
lb $s5, 0($s0)
add $s0, $s0, 1
li $s7, 1
printf_prefix_loop_1:
mul $s7, $s7, 10
sub $s5, $s5, 1
bgt $s5, '1', printf_prefix_loop_1
printf_prefix_loop_2:
move $a0, $s1
div $a0, $a0, $s7
rem $a0, $a0, 10
li $v0, 1
syscall
div $s7, $s7, 10
bge $s7, 1, printf_prefix_loop_2
lb $s5, 0($s0)
addu $s0, $s0, 1
b printf_shift_args # branch to printf_shift_args


printf_int: # deal with a %d:
move $a0, $s1 # do a print_int syscall of $s1.
li $v0, 1
syscall
b printf_shift_args # branch to printf_shift_args

printf_str: # deal with a %s:
move $a0, $s1 # do a print_string syscall of $s1.
li $v0, 4
syscall
b printf_shift_args # branch to printf_shift_args

printf_char: # deal with a %c:
sb $s1, 0($s6) # fill the buffer in with byte $s1,
sb $0, 1($s6) # and then a null.
move $a0, $s6 # and then do a print_str syscall
li $v0, 4 # on the buffer.
syscall
b printf_shift_args # branch to printf_shift_args

printf_perc: # deal with a %%:
li $s5, '%' # (this is redundant)
sb $s5, 0($s6) # fill the buffer in with byte %,
sb $0, 1($s6) # and then a null.
move $a0, $s6 # and then do a print_str syscall
li $v0, 4 # on the buffer.
syscall
b printf_loop # branch to printf_loop

printf_end:
lw $ra, 32($sp) # restore the prior environment:
lw $fp, 28($sp)
lw $s0, 24($sp)
lw $s1, 20($sp)
lw $s2, 16($sp)
lw $s3, 12($sp)
lw $s4, 8($sp)
lw $s5, 4($sp)
lw $s6, 0($sp)
lw $s7, 36($sp)
lw $t0, 40($sp)
addu $sp, $sp, 44 # release the stack frame.
jr $ra # return.

.data
printf_buf: .space 2

## end of printf.asm
